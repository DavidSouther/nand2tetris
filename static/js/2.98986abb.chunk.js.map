{"version":3,"file":"static/js/2.98986abb.chunk.js","mappings":"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","sources":["../../simulator/src/projects/runner.ts","pages/home.tsx"],"sourcesContent":["import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport {\n  isOk,\n  Ok,\n  Err,\n  isErr,\n  Result,\n} from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Assignments, Assignment } from \"@nand2tetris/projects/index.js\";\nimport type { Runner, RunResult } from \"@nand2tetris/runner/types.js\";\nimport { HDL, HdlParse } from \"../languages/hdl.js\";\nimport { Tst, TST } from \"../languages/tst.js\";\nimport { build as buildChip } from \"../chip/builder.js\";\nimport { ChipTest } from \"../tst.js\";\nimport { ParseError } from \"../languages/base.js\";\nimport { Chip } from \"../chip/chip.js\";\n\nexport interface AssignmentFiles extends Assignment {\n  hdl: string;\n  tst: string;\n  cmp: string;\n}\n\nexport interface AssignmentParse extends AssignmentFiles {\n  maybeParsedHDL: Result<HdlParse, ParseError>;\n  maybeParsedTST: Result<Tst, ParseError>;\n}\n\nexport interface AssignmentBuild extends AssignmentParse {\n  maybeChip: Result<Chip, Error>;\n  maybeTest: Result<ChipTest, Error>;\n}\n\nexport interface AssignmentRun extends AssignmentBuild {\n  pass: boolean;\n  out: string;\n  shadow?: RunResult;\n}\n\nexport const hasTest = ({\n  name,\n  ext,\n}: {\n  name: string;\n  ext: string;\n}): boolean =>\n  Assignments[name as keyof typeof Assignments] !== undefined &&\n  [\".hdl\", \".tst\"].includes(ext);\n\n/** Try parsing the loaded files. */\nexport const maybeParse = (file: AssignmentFiles): AssignmentParse => {\n  const maybeParsedHDL = HDL.parse(file.hdl);\n  const maybeParsedTST = TST.parse(file.tst);\n  return { ...file, maybeParsedHDL, maybeParsedTST };\n};\n\n/** After parsing the assignment, compile the Chip and Tst. */\nexport const maybeBuild = (file: AssignmentParse): AssignmentBuild => {\n  const maybeChip = isOk(file.maybeParsedHDL)\n    ? buildChip(Ok(file.maybeParsedHDL))\n    : Err(new Error(\"HDL Was not parsed\"));\n  const maybeTest = isOk(file.maybeParsedTST)\n    ? Ok(ChipTest.from(Ok(file.maybeParsedTST)))\n    : Err(new Error(\"TST Was not parsed\"));\n  return { ...file, maybeChip, maybeTest };\n};\n\n/** If the assignment parsed, run it! */\nexport const tryRun =\n  (fs: FileSystem) =>\n  async (assignment: AssignmentBuild): Promise<AssignmentRun> => {\n    if (isErr(assignment.maybeChip)) {\n      return {\n        ...assignment,\n        pass: false,\n        out: Err(assignment.maybeChip).message,\n      };\n    }\n    if (isErr(assignment.maybeTest)) {\n      return {\n        ...assignment,\n        pass: false,\n        out: Err(assignment.maybeTest).message,\n      };\n    }\n    const test = Ok(assignment.maybeTest)\n      .with(Ok(assignment.maybeChip))\n      .setFileSystem(fs);\n    await test.run();\n    const out = test.log();\n    const pass = out.trim() === assignment.cmp.trim();\n    return { ...assignment, out, pass };\n  };\n\n/** Parse & execute a Nand2tetris assignment, possibly also including the Java output in shadow mode. */\nexport const runner = (fs: FileSystem, ideRunner?: Runner) => {\n  const tryRunWithFs = tryRun(fs);\n  return async (assignment: AssignmentFiles): Promise<AssignmentRun> => {\n    const jsRunner = async () =>\n      tryRunWithFs(await maybeBuild(await maybeParse(assignment)));\n    const javaRunner = async () => ideRunner?.hdl(assignment);\n\n    const [jsRun, shadow] = await Promise.all([jsRunner(), javaRunner()]);\n    return { ...jsRun, shadow };\n  };\n};\n\n/** Run all tests for a given Nand2Tetris project. */\nexport async function runTests(\n  files: Array<Assignment>,\n  loadAssignment: (file: Assignment) => Promise<AssignmentFiles>,\n  fs: FileSystem,\n  ideRunner?: Runner\n): Promise<AssignmentRun[]> {\n  const run = runner(fs, ideRunner);\n  return Promise.all(\n    files.map(loadAssignment).map(async (assignment) => run(await assignment))\n  );\n}\n","import { useBaseContext } from \"@nand2tetris/components/stores/base.context\";\nimport { DiffTable } from \"@nand2tetris/components/difftable\";\nimport { Assignments, ParsedPath } from \"@nand2tetris/projects/index.js\";\nimport { runTests } from \"@nand2tetris/simulator/projects/runner.js\";\nimport { Trans } from \"@lingui/macro\";\nimport { ChangeEventHandler, useCallback, useState } from \"react\";\n// import { parse, ParsedPath } from \"node:path\";\n\nfunction hasTest({ name, ext }: { name: string; ext: string }) {\n  return (\n    Assignments[name as keyof typeof Assignments] !== undefined &&\n    ext === \".hdl\"\n  );\n}\n\nconst TestResult = (props: {\n  name: string;\n  pass: boolean;\n  hdl: string;\n  tst: string;\n  cmp: string;\n  out: string;\n}) => (\n  <details>\n    <summary>\n      {props.name} {props.pass ? <Trans>Passed</Trans> : <Trans>Failed</Trans>}\n    </summary>\n    <div className=\"flex row\">\n      <pre>\n        <code>{props.hdl}</code>\n      </pre>\n      <pre>\n        <code>{props.tst}</code>\n      </pre>\n    </div>\n    <DiffTable cmp={props.cmp} out={props.out} />\n  </details>\n);\n\nasync function loadAssignment(file: ParsedPath & { file?: File }) {\n  const assignment = Assignments[file.name as keyof typeof Assignments];\n  const hdl = (await file.file?.text()) ?? \"\";\n  const tst = assignment[\n    `${file.name}.tst` as keyof typeof assignment\n  ] as string;\n  const cmp = assignment[\n    `${file.name}.cmp` as keyof typeof assignment\n  ] as string;\n  return { ...file, hdl, tst, cmp };\n}\n\ndeclare module \"react\" {\n  // eslint-disable-next-line\n  interface HTMLAttributes<T> {\n    // extends React's HTMLAttributes\n    directory?: string;\n    webkitdirectory?: string;\n  }\n}\n\nconst Home = () => {\n  const [tests, setTests] = useState(\n    [] as Array<Parameters<typeof TestResult>[0]>\n  );\n  const { fs } = useBaseContext();\n\n  const onChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    async ({ target }) => {\n      const files = await Promise.all(\n        [...(target.files ?? [])]\n          .filter((file) => file.name.endsWith(\".hdl\"))\n          .map((file) => {\n            const { name, base, ext } =\n              file.name.match(/^(?<base>(?<name>.*)(?<ext>\\.[^.]*))?$/)\n                ?.groups ?? {};\n\n            const root = \"/\";\n            const dir = root + file.webkitRelativePath?.replace(base, \"\") ?? \"\";\n\n            return { name, base, ext, dir, root, file };\n          })\n          .filter(hasTest)\n          .map(async (file) => {\n            const hdl = await file.file.text();\n            return { ...file, hdl };\n          })\n      );\n\n      const tests = await runTests(files, loadAssignment, fs);\n\n      fs.pushd(\"/samples\");\n      setTests(tests);\n      fs.popd();\n    },\n    [setTests, fs]\n  );\n\n  return (\n    <>\n      <h1>NAND2Tetris Web IDE</h1>\n      <form>\n        <fieldset>\n          <legend>Files for grading:</legend>\n          <input\n            type=\"file\"\n            multiple\n            directory=\"\"\n            webkitdirectory=\"\"\n            onChange={onChange}\n          />\n        </fieldset>\n      </form>\n      <figure>\n        {tests.length > 0 ? (\n          tests.map((t, i) => <TestResult key={t.name} {...t} />)\n        ) : (\n          <></>\n        )}\n      </figure>\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["maybeParse","file","maybeParsedHDL","HDL","hdl","maybeParsedTST","TST","tst","maybeBuild","maybeChip","isOk","buildChip","Ok","Err","Error","maybeTest","ChipTest","runner","fs","ideRunner","tryRunWithFs","assignment","isErr","pass","out","message","test","with","setFileSystem","run","log","trim","cmp","tryRun","jsRunner","javaRunner","Promise","all","jsRun","shadow","runTests","files","loadAssignment","map","hasTest","name","ext","undefined","Assignments","TestResult","props","className","text","useState","tests","setTests","useBaseContext","onChange","useCallback","target","filter","endsWith","match","groups","base","dir","webkitRelativePath","replace","root","pushd","popd","type","multiple","directory","webkitdirectory","length","t","i"],"sourceRoot":""}