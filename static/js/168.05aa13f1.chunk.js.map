{"version":3,"file":"static/js/168.05aa13f1.chunk.js","mappings":"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","sources":["pages/util.tsx","simulator/cpu/alu.ts","util/asm.ts","util/twos.ts","../node_modules/@babel/runtime/helpers/esm/wrapRegExp.js"],"sourcesContent":["import { ChangeEventHandler, useCallback, useState } from \"react\";\nimport { asm, op } from \"../util/asm\";\nimport { bin, dec, hex, int10, int16, int2, uns } from \"../util/twos\";\n\nexport const Util = () => {\n  const [value, setValue] = useState(0);\n\n  const binValue = useCallback(() => bin(value), [value]);\n  const decValue = useCallback(() => dec(value), [value]);\n  const unsValue = useCallback(() => uns(value), [value]);\n  const hexValue = useCallback(() => hex(value), [value]);\n  const asmValue = useCallback(() => asm(value), [value]);\n\n  const set =\n    (parse: (v: string) => number): ChangeEventHandler<HTMLInputElement> =>\n    ({ target: { value } }) => {\n      setValue(parse(value));\n    };\n\n  return (\n    <form>\n      <div className=\"grid\">\n        <label>\n          Binary <input type=\"text\" value={binValue()} onChange={set(int2)} />\n        </label>\n        <label>\n          Decimal <input type=\"text\" value={decValue()} onChange={set(int10)} />\n        </label>\n        <label>\n          Unsigned{\" \"}\n          <input type=\"text\" value={unsValue()} onChange={set(int10)} />\n        </label>\n        <label>\n          Hex <input type=\"text\" value={hexValue()} onChange={set(int16)} />\n        </label>\n        <label>\n          HACK ASM <input type=\"text\" value={asmValue()} onChange={set(op)} />\n        </label>\n      </div>\n    </form>\n  );\n};\n\nexport default Util;\n","export type COMMANDS_ASM =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"D\"\n  | \"A\"\n  | \"M\"\n  | \"!D\"\n  | \"!A\"\n  | \"-D\"\n  | \"-A\"\n  | \"D+1\"\n  | \"A+1\"\n  | \"D-1\"\n  | \"A-1\"\n  | \"D+A\"\n  | \"D-A\"\n  | \"D-M\"\n  | \"A-D\"\n  | \"D&A\"\n  | \"D&M\"\n  | \"D|A\"\n  | \"D|M\";\n\nexport type COMMANDS_OP =\n  | 0b101010\n  | 0b111111\n  | 0b111010\n  | 0b001100\n  | 0b110000\n  | 0b110000\n  | 0b001101\n  | 0b110001\n  | 0b001111\n  | 0b110011\n  | 0b011111\n  | 0b110111\n  | 0b001110\n  | 0b110010\n  | 0b000010\n  | 0b010011\n  | 0b010011\n  | 0b000111\n  | 0b000000\n  | 0b000000\n  | 0b010101\n  | 0b010101;\n\nexport const COMMANDS: {\n  asm: Record<COMMANDS_ASM, COMMANDS_OP>;\n  op: Record<COMMANDS_OP, COMMANDS_ASM>;\n} = {\n  asm: {\n    \"0\": 0b101010, // 42 0x2A\n    \"1\": 0b111111, // 63 0x3F\n    \"-1\": 0b111010, // 58 0x3A\n    D: 0b001100, // 12 0x0C\n    A: 0b110000, // 48 0x30\n    M: 0b110000, // 48 0x30\n    \"!D\": 0b001101, // 13 0x0D\n    \"!A\": 0b110001, // 49 0x31\n    \"-D\": 0b001111, // 15 0x0F\n    \"-A\": 0b110011, // 51 0x33\n    \"D+1\": 0b011111, // 31 0x1F\n    \"A+1\": 0b110111, // 55 0x37\n    \"D-1\": 0b001110, // 14 0x0E\n    \"A-1\": 0b110010, // 50 0x32\n    \"D+A\": 0b000010, //  2 0x02\n    \"D-A\": 0b010011, // 19 0x13\n    \"D-M\": 0b010011, // 19 0x13\n    \"A-D\": 0b000111, //  7 0x07\n    \"D&A\": 0b000000, //  0 0x00\n    \"D&M\": 0b000000, //  0 0x00\n    \"D|A\": 0b010101, // 21 0x15\n    \"D|M\": 0b010101, // 21 0x15\n  },\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"D\",\n    0x30: \"A\",\n    0x0d: \"!D\",\n    0x31: \"!A\",\n    0x0f: \"-D\",\n    0x33: \"-A\",\n    0x1f: \"D+1\",\n    0x37: \"A+1\",\n    0x0e: \"D-1\",\n    0x32: \"A-1\",\n    0x02: \"D+A\",\n    0x13: \"D-A\",\n    0x07: \"A-D\",\n    0x00: \"D&A\",\n    0x15: \"D|A\",\n  },\n};\n\nexport type ASSIGN_ASM = \"\" | \"M\" | \"D\" | \"MD\" | \"A\" | \"AM\" | \"AD\" | \"AMD\";\nexport type ASSIGN_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport const ASSIGN: {\n  asm: Record<ASSIGN_ASM, ASSIGN_OP>;\n  op: Record<ASSIGN_OP, ASSIGN_ASM>;\n} = {\n  asm: {\n    \"\": 0x0,\n    M: 0b001,\n    D: 0b010,\n    MD: 0b011,\n    A: 0b100,\n    AM: 0b101,\n    AD: 0b110,\n    AMD: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"M\",\n    0x2: \"D\",\n    0x3: \"MD\",\n    0x4: \"A\",\n    0x5: \"AM\",\n    0x6: \"AD\",\n    0x7: \"AMD\",\n  },\n};\n\nexport type JUMP_ASM =\n  | \"\"\n  | \"JGT\"\n  | \"JEQ\"\n  | \"JGE\"\n  | \"JLT\"\n  | \"JNE\"\n  | \"JLE\"\n  | \"JMP\";\nexport type JUMP_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport const JUMP: {\n  asm: Record<JUMP_ASM, JUMP_OP>;\n  op: Record<JUMP_OP, JUMP_ASM>;\n} = {\n  asm: {\n    \"\": 0b0,\n    JGT: 0b001,\n    JEQ: 0b010,\n    JGE: 0b011,\n    JLT: 0b100,\n    JNE: 0b101,\n    JLE: 0b110,\n    JMP: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"JGT\",\n    0x2: \"JEQ\",\n    0x3: \"JGE\",\n    0x4: \"JLT\",\n    0x5: \"JNE\",\n    0x6: \"JLE\",\n    0x7: \"JMP\",\n  },\n};\n\nexport const Flags = {\n  0x01: \"Positive\",\n  0x00: \"Zero\",\n  0x0f: \"Negative\",\n  Positive: 0x01,\n  Zero: 0x00,\n  Negative: 0x0f,\n};\n\nexport function alu(op: number, d: number, a: number): [number, number] {\n  let o = 0;\n  switch (op) {\n    case 0x2a:\n      o = 0;\n      break;\n    case 0x3f:\n      o = 1;\n      break;\n    case 0x3a:\n      o = -1;\n      break;\n    case 0x0c:\n      o = d;\n      break;\n    case 0x30:\n      o = a;\n      break;\n    case 0x0d:\n      o = ~d;\n      break;\n    case 0x31:\n      o = ~a;\n      break;\n    case 0x0f:\n      o = -d;\n      break;\n    case 0x33:\n      o = -a;\n      break;\n    case 0x1f:\n      o = d + 1;\n      break;\n    case 0x37:\n      o = a + 1;\n      break;\n    case 0x0e:\n      o = d - 1;\n      break;\n    case 0x32:\n      o = a - 1;\n      break;\n    case 0x02:\n      o = d + a;\n      break;\n    case 0x13:\n      o = d - a;\n      break;\n    case 0x07:\n      o = a - d;\n      break;\n    case 0x00:\n      o = d & a;\n      break;\n    case 0x15:\n      o = d | a;\n      break;\n  }\n\n  o = o & 0xffff;\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n","import {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../simulator/cpu/alu\";\n\nexport type CommandOps = keyof typeof COMMANDS.op;\nexport type JumpOps = keyof typeof JUMP.op;\nexport type StoreOps = keyof typeof ASSIGN.op;\n\nexport function asm(op: number): string {\n  if (op & 0x8000) {\n    return cInstruction(op);\n  }\n  return aInstruction(op);\n}\n\nfunction cInstruction(op: number): string {\n  op = op & 0xffff; // Clear high order bits\n  const mop = (op & 0x1000) >> 12;\n  let cop: CommandOps = ((op & 0b0000111111000000) >> 6) as CommandOps;\n  let sop: StoreOps = ((op & 0b0000000000111000) >> 3) as StoreOps;\n  let jop: JumpOps = (op & 0b0000000000000111) as JumpOps;\n\n  if (COMMANDS.op[cop] === undefined) {\n    // Invalid commend\n    return \"#ERR\";\n  }\n\n  let command = COMMANDS.op[cop];\n  if (mop) {\n    command = command.replace(/A/g, \"M\") as COMMANDS_ASM;\n  }\n\n  const store = ASSIGN.op[sop];\n  const jump = JUMP.op[jop];\n\n  let instruction: string = command;\n  if (store) {\n    instruction = `${store}=${instruction}`;\n  }\n  if (jump) {\n    instruction = `${instruction};${jump}`;\n  }\n\n  return instruction;\n}\n\nfunction aInstruction(op: number): string {\n  return \"@\" + (op & 0x7fff).toString(10);\n}\n\nexport function op(asm: string): number {\n  if (asm[0] === \"@\") {\n    return aop(asm);\n  } else {\n    return cop(asm);\n  }\n}\n\nfunction aop(asm: string): number {\n  return parseInt(asm.substring(1), 10);\n}\n\nfunction cop(asm: string): number {\n  let parts = asm.match(\n    /(?:(?<assign>[AMD]{1,3})=)?(?<operation>[-!01ADM&|]{1,3})(?:;(?<jump>JGT|JLT|JGE|JLE|JEQ|JMP))?/\n  );\n  const { assign, operation, jump } = parts?.groups ?? {};\n  const mode = operation.includes(\"M\") || assign.includes(\"M\");\n  const aop = ASSIGN.asm[(assign as ASSIGN_ASM) ?? \"\"];\n  const jop = JUMP.asm[(jump as JUMP_ASM) ?? \"\"];\n  const cop = COMMANDS.asm[(operation as COMMANDS_ASM) ?? \"\"];\n\n  return makeC(mode, cop, aop, jop);\n}\n\nexport function makeC(\n  isM: boolean,\n  op: COMMANDS_OP,\n  assign: ASSIGN_OP = 0,\n  jmp: JUMP_OP = 0\n): number {\n  const C = 0xe000;\n  const A = isM ? 0x1000 : 0;\n  const O = op << 6;\n  const D = (assign ?? 0) << 3;\n  const J = jmp ?? 0;\n  return C + A + O + D + J;\n}\n","const Hex = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n];\n\nexport function chars(i: number): string {\n  return Hex[i] ?? \"X\";\n}\n\nexport function bits(i: number): string {\n  switch (i) {\n    case 0x0:\n      return \"0000\";\n    case 0x1:\n      return \"0001\";\n    case 0x2:\n      return \"0010\";\n    case 0x3:\n      return \"0011\";\n    case 0x4:\n      return \"0100\";\n    case 0x5:\n      return \"0101\";\n    case 0x6:\n      return \"0110\";\n    case 0x7:\n      return \"0111\";\n    case 0x8:\n      return \"1000\";\n    case 0x9:\n      return \"1001\";\n    case 0xa:\n      return \"1010\";\n    case 0xb:\n      return \"1011\";\n    case 0xc:\n      return \"1100\";\n    case 0xd:\n      return \"1101\";\n    case 0xe:\n      return \"1110\";\n    case 0xf:\n      return \"1111\";\n    default:\n      return \"erro\";\n  }\n}\n\nexport function int(n: string, radix: number): number {\n  let i = parseInt(n.replace(/[^\\d+-.xa-fA-F]/g, \"\"), radix);\n  return i & 0xffff;\n}\n\nexport function int16(i: string): number {\n  return int(i, 16);\n}\n\nexport function int10(i: string): number {\n  return int(i, 10);\n}\n\nexport function int2(i: string): number {\n  return int(i, 2);\n}\n\nexport function hex(i: number): string {\n  const hu = chars((i & 0xf000) >> 12);\n  const hl = chars((i & 0x0f00) >> 8);\n  const lu = chars((i & 0x00f0) >> 4);\n  const ll = chars(i & 0x000f);\n\n  return `0x${hu}${hl}${lu}${ll}`;\n}\n\nexport function bin(i: number, precision = 16): string {\n  const hu = bits((i & 0xf000) >> 12);\n  const hl = bits((i & 0x0f00) >> 8);\n  const lu = bits((i & 0x00f0) >> 4);\n  const ll = bits(i & 0x000f);\n\n  // return `${hu} ${hl} ${lu} ${ll}`;\n  return `${hu}${hl}${lu}${ll}`.substring(16 - precision); // Match the book's formatting\n}\n\nexport function dec(i: number): string {\n  i = i & 0xffff;\n  if (i === 0x8000) {\n    return \"-32768\";\n  }\n  if (i & 0x8000) {\n    i = (~i + 1) & 0x7fff;\n    return `-${i}`;\n  }\n  return `${i}`;\n}\n\nexport function uns(i: number): string {\n  i = i & 0xffff;\n  return `${i}`;\n}\n\nexport function nand16(a: number, b: number): number {\n  a = a & 0xffff;\n  b = b & 0xffff;\n  let c = ~(a & b);\n  c = c & 0xffff;\n  return c;\n}\n","import _typeof from \"./typeof.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport inherits from \"./inherits.js\";\nexport default function _wrapRegExp() {\n  _wrapRegExp = function _wrapRegExp(re, groups) {\n    return new BabelRegExp(re, void 0, groups);\n  };\n\n  var _super = RegExp.prototype,\n      _groups = new WeakMap();\n\n  function BabelRegExp(re, flags, groups) {\n    var _this = new RegExp(re, flags);\n\n    return _groups.set(_this, groups || _groups.get(re)), setPrototypeOf(_this, BabelRegExp.prototype);\n  }\n\n  function buildGroups(result, re) {\n    var g = _groups.get(re);\n\n    return Object.keys(g).reduce(function (groups, name) {\n      return groups[name] = result[g[name]], groups;\n    }, Object.create(null));\n  }\n\n  return inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) {\n    var result = _super.exec.call(this, str);\n\n    return result && (result.groups = buildGroups(result, this)), result;\n  }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {\n    if (\"string\" == typeof substitution) {\n      var groups = _groups.get(this);\n\n      return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) {\n        return \"$\" + groups[name];\n      }));\n    }\n\n    if (\"function\" == typeof substitution) {\n      var _this = this;\n\n      return _super[Symbol.replace].call(this, str, function () {\n        var args = arguments;\n        return \"object\" != _typeof(args[args.length - 1]) && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);\n      });\n    }\n\n    return _super[Symbol.replace].call(this, str, substitution);\n  }, _wrapRegExp.apply(this, arguments);\n}"],"names":["Util","useState","value","setValue","binValue","useCallback","bin","decValue","dec","unsValue","uns","hexValue","hex","asmValue","asm","set","parse","target","className","type","onChange","int2","int10","int16","op","COMMANDS","D","A","M","ASSIGN","MD","AM","AD","AMD","JUMP","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","Flags","Positive","Zero","Negative","alu","d","a","o","mop","cop","sop","jop","undefined","command","replace","store","jump","instruction","cInstruction","toString","aInstruction","parseInt","substring","aop","parts","match","groups","assign","operation","mode","includes","makeC","isM","jmp","C","O","J","Hex","chars","i","bits","int","n","radix","hu","hl","lu","ll","precision","nand16","b","c","_wrapRegExp","re","BabelRegExp","_super","RegExp","prototype","_groups","WeakMap","flags","_this","get","buildGroups","result","g","Object","keys","reduce","name","create","exec","str","call","this","Symbol","substitution","_","args","arguments","length","slice","push","apply"],"sourceRoot":""}