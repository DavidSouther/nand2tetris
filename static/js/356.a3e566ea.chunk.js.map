{"version":3,"file":"static/js/356.a3e566ea.chunk.js","mappings":"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","sources":["../../components/src/difftable.tsx","../../simulator/src/chip/builder.ts","../../simulator/src/chip/builtins/computer/computer.tsx","../../simulator/src/chip/builtins/logic/and.ts","../../simulator/src/chip/builtins/logic/dmux.ts","../../simulator/src/chip/builtins/logic/mux.ts","../../simulator/src/chip/builtins/logic/nand.ts","../../simulator/src/chip/builtins/logic/not.ts","../../simulator/src/chip/builtins/logic/or.ts","../../simulator/src/chip/builtins/logic/xor.ts","../../simulator/src/chip/builtins/arithmetic/add_16.ts","../../simulator/src/chip/builtins/arithmetic/alu.tsx","../../simulator/src/chip/builtins/arithmetic/half_adder.ts","../../simulator/src/chip/builtins/arithmetic/full_adder.ts","../../simulator/src/chip/builtins/arithmetic/inc16.ts","../../simulator/src/chip/builtins/sequential/dff.ts","../../simulator/src/chip/builtins/index.ts","../../simulator/src/chip/builtins/sequential/bit.tsx","../../simulator/src/chip/builtins/sequential/ram.tsx","../../simulator/src/chip/chip.tsx","../../simulator/src/chip/clock.ts","../../simulator/src/cpu/alu.ts","../../simulator/src/cpu/cpu.ts","../../simulator/src/cpu/memory.ts","../../simulator/src/languages/grammars/asm.ohm.js","../../simulator/src/languages/asm.ts","../../simulator/src/fs.ts","../../simulator/src/languages/base.ts","../../simulator/src/languages/grammars/base.ohm.js","../../simulator/src/languages/grammars/cmp.ohm.js","../../simulator/src/languages/cmp.ts","../../simulator/src/languages/grammars/hdl.ohm.js","../../simulator/src/languages/hdl.ts","../../simulator/src/languages/grammars/tst.ohm.js","../../simulator/src/languages/tst.ts","../../simulator/src/output.ts","../../simulator/src/tst.ts","../../simulator/src/util/asm.ts","../../simulator/src/util/twos.ts"],"sourcesContent":["import { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { display } from \"@davidsouther/jiffies/lib/esm/display.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { Err, isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ReactElement } from \"react\";\n\nexport const DiffTable = ({\n  className = \"\",\n  out,\n  cmp,\n  zeroState,\n}: {\n  out: string;\n  cmp: string;\n  className?: string;\n  zeroState?: ReactElement;\n}) => {\n  const output = CMP.parse(out);\n  const compare = CMP.parse(cmp);\n\n  if (isErr(output)) {\n    return (\n      <details>\n        <summary>Failed to parse output</summary>\n        <pre>{display(Err(output))}</pre>\n        <code>\n          <pre>{out}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  if (isErr(compare)) {\n    return (\n      <details>\n        <summary>Failed to parse compare</summary>\n        <code>\n          <pre>{display(Err(compare))}</pre>\n          <pre>{cmp}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  const cmpData = Ok(compare);\n  const outData = Ok(output);\n  let failures = 0;\n  const table = range(0, Math.min(cmpData.length, outData.length)).map((i) => {\n    const cmpI = cmpData[i] ?? [];\n    const outI = outData[i] ?? [];\n    return range(0, Math.max(cmpI.length, outI.length))\n      .map((_, j) => [cmpI[j] ?? \"\", outI[j] ?? \"\"])\n      .map(([cmp, out]) => {\n        const cell = {\n          cmp: cmp ?? '\"',\n          out: out ?? '\"',\n          pass:\n            cmp?.trim().match(/^\\*+$/) !== null || out?.trim() === cmp?.trim(),\n        };\n        if (!cell.pass) {\n          failures += 1;\n        }\n        return cell;\n      });\n  });\n\n  return (\n    <div className={\"scroll-x \" + className}>\n      {failures > 0 && (\n        <p>\n          {failures} failure{failures === 1 ? \"\" : \"s\"}\n        </p>\n      )}\n      {table.length > 0 ? (\n        <table\n          style={{\n            fontFamily: \"var(--font-family-monospace)\",\n            marginBottom: \"none\",\n          }}\n        >\n          <tbody>\n            {table.map((row, i) => (\n              <tr key={i}>\n                {row.map(({ cmp, out, pass }, i) => (\n                  <DiffCell cmp={cmp} out={out} pass={pass} key={i} />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        zeroState ?? <p>Execute test script to compare output.</p>\n      )}\n    </div>\n  );\n};\n\nconst DiffCell = ({\n  cmp,\n  out,\n  pass,\n}: {\n  cmp: string;\n  out: string;\n  pass: boolean;\n}) => {\n  return pass ? (\n    <>\n      <td>{cmp}</td>\n    </>\n  ) : (\n    <>\n      <td>\n        <ins>{cmp}</ins>\n        <br />\n        <del>{out}</del>\n      </td>\n    </>\n  );\n};\n","import {\n  Err,\n  isErr,\n  Ok,\n  Result,\n} from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { HDL, HdlParse } from \"../languages/hdl.js\";\nimport { getBuiltinChip } from \"./builtins/index.js\";\nimport { Chip, Connection } from \"./chip.js\";\n\nfunction pinWidth(start: number, end: number | undefined): number | undefined {\n  if (end === undefined) {\n    return undefined;\n  }\n  if (end >= start) {\n    return end - start + 1;\n  }\n  if (start > 0 && end === 0) {\n    return 1;\n  }\n  throw new Error(`Bus specification has start > end (${start} > ${end})`);\n}\n\nexport function parse(\n  code: string\n): Result<Chip, Error | { message: string; shortMessage: string }> {\n  const parsed = HDL.parse(code.toString());\n  if (isErr(parsed)) return parsed;\n  return build(Ok(parsed));\n}\n\nexport function build(parts: HdlParse): Result<Chip, Error> {\n  if (parts.parts === \"BUILTIN\") {\n    return getBuiltinChip(parts.name.toString());\n  }\n\n  const buildChip = new Chip(\n    parts.ins.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.outs.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.name.toString(),\n    [],\n    parts.clocked\n  );\n\n  for (const part of parts.parts) {\n    const builtin = getBuiltinChip(part.name.toString());\n    if (isErr(builtin)) return builtin;\n    const partChip = Ok(builtin);\n\n    const wires = part.wires.map<Connection>(({ lhs, rhs }) => ({\n      to: {\n        name: lhs.pin.toString(),\n        start: lhs.start ?? 0,\n        width: pinWidth(lhs.start ?? 0, lhs.end),\n      },\n      from: {\n        name: rhs.pin.toString(),\n        start: rhs.start ?? 0,\n        width: pinWidth(rhs.start ?? 0, rhs.end),\n      },\n    }));\n\n    try {\n      buildChip.wire(partChip, wires);\n    } catch (e) {\n      return Err(e as Error);\n    }\n  }\n\n  return Ok(buildChip);\n}\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n// import { Screen as ScreenComponent } from \"../../../../app/components/chips/screen.js\";\n// import { Keyboard as KeyboardComponent } from \"../../../../app/components/chips/keyboard.js\";\n// import { RegisterComponent } from \"../../../../app/components/chips/register.js\";\n// import { ALUComponent } from \"../../../../app/components/chips/alu.js\";\n// import { Flags } from \"../../../cpu/alu.js\";\nimport { Chip, ClockedChip, ConstantBus, HIGH, LOW, Pin } from \"../../chip.js\";\nimport { RAM, RAM16K } from \"../sequential/ram.js\";\nimport {\n  CPUInput,\n  CPUState,\n  cpuTick,\n  cpuTock,\n  emptyState,\n} from \"../../../cpu/cpu.js\";\nimport { int10 } from \"../../../util/twos.js\";\nimport { load } from \"../../../fs.js\";\nimport { KEYBOARD, SCREEN } from \"../../../cpu/memory.js\";\n\nexport class ROM32K extends RAM {\n  constructor() {\n    super(16, \"ROM\");\n  }\n\n  override async load(fs: FileSystem, path: string) {\n    try {\n      (await load(fs, path)).map((v, i) => (this.at(i).busVoltage = v));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`ROM32K Failed to load file ${path}`);\n    }\n  }\n}\n\nexport class Screen extends RAM {\n  static readonly OFFSET = SCREEN;\n\n  constructor() {\n    super(13, \"Screen\");\n  }\n}\n\nexport class Keyboard extends Chip {\n  static readonly OFFSET = KEYBOARD;\n\n  constructor() {\n    super([], [\"out[16]\"], \"Keyboard\");\n  }\n\n  setKey(key: number) {\n    this.out().busVoltage = key & 0xffff;\n  }\n\n  clearKey() {\n    this.out().busVoltage = 0;\n  }\n}\n\nexport class Memory extends ClockedChip {\n  private ram = new RAM16K();\n  private screen = new Screen();\n  private keyboard = new Keyboard();\n  private address = 0;\n\n  constructor() {\n    super([\"in[16]\", \"load\", \"address[15])\"], [\"out[16]\"], \"Memory\");\n    this.parts.add(this.keyboard);\n    this.parts.add(this.screen);\n    this.parts.add(this.ram);\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this.address = this.in(\"address\").busVoltage;\n    if (load) {\n      const inn = this.in().busVoltage;\n      if (this.address >= Keyboard.OFFSET) {\n        // Keyboard, do nothing\n      } else if (this.address >= Screen.OFFSET) {\n        this.screen.at(this.address - Screen.OFFSET).busVoltage = inn;\n      } else {\n        this.ram.at(this.address).busVoltage = inn;\n      }\n    }\n  }\n\n  override tock() {\n    this.eval();\n  }\n\n  override eval() {\n    if (!this.ram) return;\n    this.address = this.in(\"address\").busVoltage;\n    let out = 0;\n    if (this.address >= Keyboard.OFFSET) {\n      // Keyboard, do nothing\n      out = this.keyboard?.out().busVoltage ?? 0;\n    } else if (this.address >= Screen.OFFSET) {\n      out = this.screen?.at(this.address - Screen.OFFSET).busVoltage ?? 0;\n    } else {\n      out = this.ram?.at(this.address).busVoltage ?? 0;\n    }\n    this.out().busVoltage = out;\n  }\n\n  override in(pin?: string): Pin {\n    if (pin?.startsWith(\"RAM16K\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.ram.at(idx);\n    }\n    if (pin?.startsWith(\"Screen\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.screen.at(idx);\n    }\n    return super.in(pin);\n  }\n\n  override get(name: string, offset = 0): Pin | undefined {\n    if (name.startsWith(\"RAM16K\")) {\n      return this.at(offset & 0x3fff);\n    }\n    if (name.startsWith(\"Screen\")) {\n      return this.at(offset & (0x1fff + Screen.OFFSET));\n    }\n    if (name.startsWith(\"Keyboard\")) {\n      return this.at(Keyboard.OFFSET);\n    }\n    if (name.startsWith(\"Memory\")) {\n      return this.at(offset);\n    }\n    return super.get(name, offset);\n  }\n\n  at(offset: number): Pin {\n    if (offset >= Keyboard.OFFSET) {\n      return this.keyboard.out();\n    }\n    if (offset >= Screen.OFFSET) {\n      return this.screen.at(offset - Screen.OFFSET);\n    } else {\n      return this.ram.at(offset);\n    }\n  }\n}\n\nexport class CPU extends ClockedChip {\n  private _state: CPUState = emptyState();\n\n  get state(): CPUState {\n    return this._state;\n  }\n\n  constructor() {\n    super(\n      [\"inM[16]\", \"instruction[16]\", \"reset\"],\n      [\"outM[16]\", \"writeM\", \"addressM[15]\", \"pc[15]\"]\n    );\n  }\n\n  override tick(): void {\n    const [state, writeM] = cpuTick(this.cpuInput(), this._state);\n    this._state = state;\n    this.out(\"writeM\").pull(writeM ? HIGH : LOW);\n    this.out(\"outM\").busVoltage = this._state.ALU ?? 0;\n  }\n\n  override tock(): void {\n    if (!this._state) return; // Skip initial tock\n    const [output, state] = cpuTock(this.cpuInput(), this._state);\n    this._state = state;\n\n    this.out(\"addressM\").busVoltage = output.addressM ?? 0;\n    this.out(\"outM\").busVoltage = output.outM ?? 0;\n    this.out(\"writeM\").pull(output.writeM ? HIGH : LOW);\n    this.out(\"pc\").busVoltage = this._state?.PC ?? 0;\n  }\n\n  private cpuInput(): CPUInput {\n    const inM = this.in(\"inM\").busVoltage;\n    const instruction = this.in(\"instruction\").busVoltage;\n    const reset = this.in(\"reset\").busVoltage === 1;\n    return { inM, instruction, reset };\n  }\n\n  override get(pin: string, offset?: number): Pin | undefined {\n    if (pin?.startsWith(\"ARegister\")) {\n      return new ConstantBus(\"ARegister\", this._state.A);\n    }\n    if (pin?.startsWith(\"DRegister\")) {\n      return new ConstantBus(\"DRegister\", this._state.D);\n    }\n    if (pin?.startsWith(\"PC\")) {\n      return new ConstantBus(\"PC\", this._state.PC);\n    }\n    return super.get(pin, offset);\n  }\n\n  override reset() {\n    this._state = emptyState();\n    super.reset();\n  }\n}\n\nexport class Computer extends Chip {\n  #ram = new Memory();\n  #rom = new ROM32K();\n  #cpu = new CPU();\n\n  constructor() {\n    super([\"reset\"], []);\n\n    this.wire(this.#cpu, [\n      { from: { name: \"reset\", start: 0 }, to: { name: \"reset\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"instruction\", start: 0 },\n      },\n      { from: { name: \"outM\", start: 0 }, to: { name: \"inM\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"writeM\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"addressM\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#rom, [\n      { from: { name: \"pc\", start: 0 }, to: { name: \"address\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"out\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#ram, [\n      { from: { name: \"inM\", start: 0 }, to: { name: \"in\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"load\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"address\", start: 0 },\n      },\n      { from: { name: \"outM\", start: 0 }, to: { name: \"out\", start: 0 } },\n    ]);\n  }\n\n  override eval() {\n    super.eval();\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    if (\n      name.startsWith(\"PC\") ||\n      name.startsWith(\"ARegister\") ||\n      name.startsWith(\"DRegister\")\n    ) {\n      return this.#cpu.get(name);\n    }\n    if (name.startsWith(\"RAM16K\")) {\n      return this.#ram.get(name, offset);\n    }\n    return super.get(name, offset);\n  }\n\n  override load(fs: FileSystem, path: string): Promise<void> {\n    return this.#rom.load(fs, path);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function and(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? HIGH : LOW];\n}\n\nexport function and16(a: number, b: number): [number] {\n  return [a & b & 0xffff];\n}\n\nexport class And extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [n] = and(a, b);\n    this.out().pull(n);\n  }\n}\n\nexport class And16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [n] = and16(a, b);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function dmux(inn: Voltage, sel: Voltage): [Voltage, Voltage] {\n  const a = sel === LOW && inn === HIGH ? HIGH : LOW;\n  const b = sel === HIGH && inn === HIGH ? HIGH : LOW;\n  return [a, b];\n}\n\nexport function dmux4way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b00 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b01 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b10 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b11 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d];\n}\n\nexport function dmux8way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b000 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b001 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b010 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b011 && inn === HIGH ? HIGH : LOW;\n  const e = sel === 0b100 && inn === HIGH ? HIGH : LOW;\n  const f = sel === 0b101 && inn === HIGH ? HIGH : LOW;\n  const g = sel === 0b110 && inn === HIGH ? HIGH : LOW;\n  const h = sel === 0b111 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d, e, f, g, h];\n}\n\nexport class DMux extends Chip {\n  constructor() {\n    super([\"in\", \"sel\"], [\"a\", \"b\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [a, b] = dmux(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n  }\n}\n\nexport class DMux4Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[2]\"], [\"a\", \"b\", \"c\", \"d\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d] = dmux4way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n  }\n}\n\nexport class DMux8Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[3]\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d, e, f, g, h] = dmux8way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n    this.out(\"e\").pull(e);\n    this.out(\"f\").pull(f);\n    this.out(\"g\").pull(g);\n    this.out(\"h\").pull(h);\n  }\n}\n","import { Chip, LOW, Voltage } from \"../../chip.js\";\n\nexport function mux(a: Voltage, b: Voltage, sel: Voltage): [Voltage] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16(a: number, b: number, sel: Voltage): [number] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16_4(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b01) as Voltage;\n  return (sel & 0b10) === 0b00 ? mux16(a, b, s2) : mux16(c, d, s2);\n}\n\nexport function mux16_8(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  e: number,\n  f: number,\n  g: number,\n  h: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b11) as Voltage;\n  return (sel & 0b100) === 0b000\n    ? mux16_4(a, b, c, d, s2)\n    : mux16_4(e, f, g, h, s2);\n}\n\nexport class Mux extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"sel\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [set] = mux(a, b, sel);\n    this.out().pull(set);\n  }\n}\n\nexport class Mux16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"sel\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const sel = this.in(\"sel\").voltage();\n    const [out] = mux16(a, b, sel);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux4Way16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"c[16]\", \"d[16]\", \"sel[2]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_4(a, b, c, d, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux8Way16 extends Chip {\n  constructor() {\n    super(\n      [\n        \"a[16]\",\n        \"b[16]\",\n        \"c[16]\",\n        \"d[16]\",\n        \"e[16]\",\n        \"f[16]\",\n        \"g[16]\",\n        \"h[16]\",\n        \"sel[3]\",\n      ],\n      [\"out[16]\"]\n    );\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const e = this.in(\"e\").busVoltage;\n    const f = this.in(\"f\").busVoltage;\n    const g = this.in(\"g\").busVoltage;\n    const h = this.in(\"h\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_8(a, b, c, d, e, f, g, h, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n","import { nand16 } from \"../../../util/twos.js\";\nimport { HIGH, LOW, Chip, Voltage } from \"../../chip.js\";\n\nexport function nand(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? LOW : HIGH];\n}\n\nexport class Nand extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = nand(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Nand16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    this.out().busVoltage = nand16(a, b);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function not(inn: Voltage): [Voltage] {\n  return [inn === LOW ? HIGH : LOW];\n}\n\nexport function not16(inn: number): [number] {\n  return [~inn & 0xffff];\n}\n\nexport class Not extends Chip {\n  constructor() {\n    super([\"in\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"in\").voltage();\n    const [out] = not(a);\n    this.out().pull(out);\n  }\n}\n\nexport class Not16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const [n] = not16(this.in().busVoltage);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function or(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 || b === 1 ? HIGH : LOW];\n}\n\nexport function or16(a: number, b: number): [number] {\n  return [(a | b) & 0xffff];\n}\n\nexport function or8way(a: number): [Voltage] {\n  return [(a & 0xff) === 0 ? LOW : HIGH];\n}\n\nexport class Or extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = or(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Or16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = or16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Or8way extends Chip {\n  constructor() {\n    super([\"in[8]\"], [\"out\"], \"Or8way\");\n  }\n\n  override eval() {\n    const inn = this.in().busVoltage;\n    const [out] = or8way(inn);\n    this.out().pull(out);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function xor(a: Voltage, b: Voltage): [Voltage] {\n  return [(a === HIGH && b === LOW) || (a === LOW && b === HIGH) ? HIGH : LOW];\n}\n\nexport function xor16(a: number, b: number): [number] {\n  return [(a ^ b) & 0xffff];\n}\n\nexport class Xor extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = xor(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Xor16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = xor16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { Chip } from \"../../chip.js\";\n\nexport function add16(a: number, b: number): [number] {\n  return [(a + b) & 0xffff];\n}\n\nexport class Add16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"], \"Add16\");\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = add16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { alu, COMMANDS_OP, Flags } from \"../../../cpu/alu.js\";\nimport { Chip, HIGH, LOW } from \"../../chip.js\";\n\nexport class ALUNoStat extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    const [out] = alu(op, x, y);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class ALU extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    const [out, flags] = alu(op, x, y);\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function halfAdder(a: Voltage, b: Voltage): [Voltage, Voltage] {\n  const sum = (a === 1 && b === 0) || (a === 0 && b === 1) ? HIGH : LOW;\n  const car = a === 1 && b === 1 ? HIGH : LOW;\n\n  return [sum, car];\n}\n\nexport class HalfAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [sum, carry] = halfAdder(a, b);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip, Voltage } from \"../../chip.js\";\nimport { or } from \"../logic/or.js\";\nimport { halfAdder } from \"./half_adder.js\";\n\nexport function fullAdder(\n  a: Voltage,\n  b: Voltage,\n  c: Voltage\n): [Voltage, Voltage] {\n  const [s, ca] = halfAdder(a, b);\n  const [sum, cb] = halfAdder(s, c);\n  const [carry] = or(ca, cb);\n\n  return [sum, carry];\n}\n\nexport class FullAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"c\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const c = this.in(\"c\").voltage();\n    const [sum, carry] = fullAdder(a, b, c);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip } from \"../../chip.js\";\nimport { add16 } from \"./add_16.js\";\n\nexport function inc16(n: number): [number] {\n  return add16(n, 1);\n}\n\nexport class Inc16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"], \"Inc16\");\n  }\n\n  override eval() {\n    const a = this.in().busVoltage;\n    const [out] = inc16(a);\n    this.out().busVoltage = out;\n  }\n}\n","import { ClockedChip } from \"../../chip.js\";\n\nexport class DFF extends ClockedChip {\n  constructor(name?: string) {\n    super([\"in\"], [\"out\"], name, [\"t\"]);\n  }\n\n  override tick() {\n    // Read in into t\n    const t = this.in().voltage();\n    this.pin(\"t\").pull(t);\n  }\n\n  override tock() {\n    // write t into out\n    const t = this.pin(\"t\").voltage();\n    this.out().pull(t);\n  }\n}\n","import { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Chip } from \"../chip.js\";\n\nimport { And, And16 } from \"./logic/and.js\";\nimport { DMux, DMux4Way, DMux8Way } from \"./logic/dmux.js\";\nimport { Mux, Mux16, Mux4Way16, Mux8Way16 } from \"./logic/mux.js\";\nimport { Nand, Nand16 } from \"./logic/nand.js\";\nimport { Not, Not16 } from \"./logic/not.js\";\nimport { Or, Or16, Or8way } from \"./logic/or.js\";\nimport { Xor, Xor16 } from \"./logic/xor.js\";\n\nimport { Add16 } from \"./arithmetic/add_16.js\";\nimport { ALU, ALUNoStat } from \"./arithmetic/alu.js\";\nimport { FullAdder } from \"./arithmetic/full_adder.js\";\nimport { HalfAdder } from \"./arithmetic/half_adder.js\";\nimport { Inc16 } from \"./arithmetic/inc16.js\";\n\nimport {\n  Computer,\n  CPU,\n  Keyboard,\n  Memory,\n  ROM32K,\n  Screen,\n} from \"./computer/computer.js\";\nimport { Bit, PC, Register, VRegister } from \"./sequential/bit.js\";\nimport { DFF } from \"./sequential/dff.js\";\nimport { RAM16K, RAM4K, RAM512, RAM64, RAM8 } from \"./sequential/ram.js\";\n\nexport {\n  And,\n  And16,\n  DMux,\n  Mux,\n  Mux16,\n  Mux4Way16,\n  Mux8Way16,\n  Nand,\n  Nand16,\n  Not,\n  Not16,\n  Or,\n  Or16,\n  Or8way,\n  Xor,\n  Xor16,\n  HalfAdder,\n  FullAdder,\n  Add16,\n  Inc16,\n  ALU,\n  Bit,\n  Register,\n  VRegister as ARegister,\n  VRegister as DRegister,\n  DFF,\n  RAM8,\n  RAM64,\n  RAM512,\n  RAM4K,\n  RAM16K,\n};\n\nexport const REGISTRY = new Map<string, () => Chip>(\n  (\n    [\n      [\"Nand\", Nand],\n      [\"Nand16\", Nand16],\n      [\"Not\", Not],\n      [\"Not16\", Not16],\n      [\"And\", And],\n      [\"And16\", And16],\n      [\"Or\", Or],\n      [\"Or16\", Or16],\n      [\"Or8Way\", Or8way],\n      [\"XOr\", Xor],\n      [\"XOr16\", Xor16],\n      [\"Xor\", Xor],\n      [\"Xor16\", Xor16],\n      [\"Mux\", Mux],\n      [\"Mux16\", Mux16],\n      [\"Mux4Way16\", Mux4Way16],\n      [\"Mux8Way16\", Mux8Way16],\n      [\"DMux\", DMux],\n      [\"DMux4Way\", DMux4Way],\n      [\"DMux8Way\", DMux8Way],\n      [\"HalfAdder\", HalfAdder],\n      [\"FullAdder\", FullAdder],\n      [\"Add16\", Add16],\n      [\"Inc16\", Inc16],\n      [\"ALU\", ALU],\n      [\"ALUNoStat\", ALUNoStat],\n      [\"DFF\", DFF],\n      [\"Bit\", Bit],\n      [\"Register\", Register],\n      [\"ARegister\", Register],\n      [\"DRegister\", Register],\n      [\"PC\", PC],\n      [\"RAM8\", RAM8],\n      [\"RAM64\", RAM64],\n      [\"RAM512\", RAM512],\n      [\"RAM4K\", RAM4K],\n      [\"RAM16K\", RAM16K],\n      [\"ROM32K\", ROM32K],\n      [\"Screen\", Screen],\n      [\"Keyboard\", Keyboard],\n      [\"CPU\", CPU],\n      [\"Computer\", Computer],\n      [\"Memory\", Memory],\n      [\"ARegister\", VRegister],\n      [\"DRegister\", VRegister],\n    ] as [string, { new (): Chip }][]\n  ).map(([name, ChipCtor]) => [\n    name,\n    () => {\n      const chip = new ChipCtor();\n      chip.name = name;\n      return chip;\n    },\n  ])\n);\n\nexport function getBuiltinChip(name: string): Result<Chip> {\n  const chip = REGISTRY.get(name);\n  return chip\n    ? Ok(chip())\n    : Err(new Error(`Chip ${name} not in builtin registry`));\n}\n","import { ClockedChip, HIGH, LOW, Pin, Voltage } from \"../../chip.js\";\n\nexport class Bit extends ClockedChip {\n  bit: Voltage = LOW;\n\n  constructor(name?: string) {\n    super([\"in\", \"load\"], [\"out\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bit = this.in().voltage();\n    }\n  }\n\n  override tock() {\n    this.out().pull(this.bit ?? 0);\n  }\n\n  override reset() {\n    this.bit = LOW;\n  }\n}\n\nexport class Register extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n  }\n}\n\nexport class VRegister extends Register {}\n\nexport class PC extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\", \"inc\", \"reset\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"reset\").voltage() === HIGH) {\n      this.bits = 0;\n    } else if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    } else if (this.in(\"inc\").voltage() === HIGH) {\n      this.bits += 1;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n  }\n}\n","import { Bus, ClockedChip, Pin } from \"../../chip.js\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { Memory, Memory as MemoryChip } from \"../../../cpu/memory.js\";\n\nexport class RAM extends ClockedChip {\n  protected _memory: MemoryChip;\n  private _nextData = 0;\n  private _address = 0;\n\n  get memory() {\n    return this._memory;\n  }\n  get address() {\n    return this._address;\n  }\n\n  constructor(readonly width: number, name?: string) {\n    super([\"in[16]\", \"load\", `address[${width}]`], [`out[16]`], name);\n    this._memory = new MemoryChip(Math.pow(2, this.width));\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this._address = this.in(\"address\").busVoltage;\n    if (load) {\n      this._nextData = this.in().busVoltage;\n      this._memory.set(this._address, this._nextData);\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this._memory?.get(this._address) ?? 0;\n  }\n\n  override eval() {\n    const address = this.in(\"address\").busVoltage;\n    this.out().busVoltage = this._memory?.get(address) ?? 0;\n  }\n\n  at(idx: number): Pin {\n    assert(\n      idx < this._memory.size,\n      () => `Request out of bounds (${idx} >= ${this._memory.size})`\n    );\n    return new RamBus(`${this.name}[${idx}]`, idx, this._memory);\n  }\n}\n\nexport class RamBus extends Bus {\n  constructor(\n    name: string,\n    private readonly index: number,\n    private ram: Memory\n  ) {\n    super(name);\n  }\n\n  override get busVoltage(): number {\n    return this.ram.get(this.index);\n  }\n\n  override set busVoltage(num: number) {\n    this.ram.set(this.index, num);\n  }\n}\n\nexport class RAM8 extends RAM {\n  constructor(name?: string) {\n    super(3, name);\n  }\n}\n\nexport class RAM64 extends RAM {\n  constructor(name?: string) {\n    super(6, name);\n  }\n}\n\nexport class RAM512 extends RAM {\n  constructor(name?: string) {\n    super(9, name);\n  }\n}\n\nexport class RAM4K extends RAM {\n  constructor(name?: string) {\n    super(12, name);\n  }\n}\n\nexport class RAM16K extends RAM {\n  constructor(name?: string) {\n    super(14, name);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { assert, assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { bin } from \"../util/twos.js\";\nimport { Clock } from \"./clock.js\";\n\nexport const HIGH = 1;\nexport const LOW = 0;\nexport type Voltage = typeof HIGH | typeof LOW;\n\nexport interface Pin {\n  readonly name: string;\n  readonly width: number;\n  busVoltage: number;\n  pull(voltage: Voltage, bit?: number): void;\n  toggle(bit?: number): void;\n  voltage(bit?: number): Voltage;\n  connect(pin: Pin): void;\n}\n\nexport class Bus implements Pin {\n  state: Voltage[];\n  next: Pin[] = [];\n\n  constructor(readonly name: string, readonly width = 1) {\n    this.state = range(0, this.width).map(() => LOW);\n  }\n\n  ensureWidth(newWidth: number) {\n    assert(newWidth <= 16, `Cannot widen past 16 to ${newWidth} bits`);\n    if (this.width < newWidth) {\n      (this as { width: number }).width = newWidth;\n      this.state = [\n        ...this.state,\n        ...range(this.width, newWidth).map(() => LOW as Voltage),\n      ];\n    }\n  }\n\n  connect(next: Pin) {\n    this.next.push(next);\n    next.busVoltage = this.busVoltage;\n  }\n\n  pull(voltage: Voltage, bit = 0) {\n    assert(\n      bit >= 0 && bit < this.width,\n      `Bit out of bounds: ${this.name}@${bit}`\n    );\n    this.state[bit] = voltage;\n    this.next.forEach((n) => n.pull(voltage, bit));\n  }\n\n  voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.state[bit];\n  }\n\n  set busVoltage(voltage: number) {\n    for (const i of range(0, this.width)) {\n      this.state[i] = ((voltage & (1 << i)) >> i) as Voltage;\n    }\n    this.next.forEach((n) => (n.busVoltage = this.busVoltage));\n  }\n\n  get busVoltage(): number {\n    return range(0, this.width).reduce((b, i) => b | (this.state[i] << i), 0);\n  }\n\n  toggle(bit = 0) {\n    const nextVoltage = this.voltage(bit) === LOW ? HIGH : LOW;\n    this.pull(nextVoltage, bit);\n  }\n}\n\nexport class InSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(\n      start >= 0 && start + width <= bus.width,\n      `Mismatched InSubBus dimensions on ${bus.name} (${width} + ${start} > ${bus.width})`\n    );\n    this.connect(bus);\n  }\n\n  override pull(voltage: Voltage, bit = 0) {\n    assert(bit >= 0 && bit < this.width);\n    this.bus.pull(voltage, this.start + bit);\n  }\n\n  override voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.bus.voltage(this.start + bit);\n  }\n\n  override set busVoltage(voltage: number) {\n    const high = this.bus.busVoltage & ~mask(this.width + this.start);\n    const low = this.bus.busVoltage & mask(this.start);\n    const mid = (voltage & mask(this.width)) << this.start;\n    this.bus.busVoltage = high | mid | low;\n  }\n\n  override get busVoltage(): number {\n    return (this.bus.busVoltage >> this.start) & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.start + this.width <= bus.width,\n      `Mismatched InSubBus connection dimensions (From ${bus.name} to ${this.name})`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class OutSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(start >= 0 && width <= bus.width, `Mismatched OutSubBus dimensions`);\n    this.connect(bus);\n  }\n\n  override set busVoltage(voltage: number) {\n    this.bus.busVoltage =\n      (voltage & mask(this.width + this.start)) >> this.start;\n  }\n\n  override get busVoltage(): number {\n    return this.bus.busVoltage & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.width <= bus.width,\n      `Mismatched OutSubBus connection dimensions`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class ConstantBus extends Bus {\n  constructor(name: string, private readonly value: number) {\n    super(name, 16 /* TODO: get high bit index */);\n  }\n\n  pullHigh(_ = 0) {\n    return undefined;\n  }\n  pullLow(_ = 0) {\n    return undefined;\n  }\n  override voltage(_ = 0): Voltage {\n    return (this.busVoltage & 0x1) as Voltage;\n  }\n\n  override set busVoltage(voltage: number) {\n    // Noop\n  }\n  override get busVoltage(): number {\n    return this.value;\n  }\n}\n\nexport const TRUE_BUS = new ConstantBus(\"true\", 0xffff);\nexport const FALSE_BUS = new ConstantBus(\"false\", 0);\n\nexport function parsePinDecl(toPin: string): {\n  pin: string;\n  width: number;\n} {\n  const { pin, w } = toPin.match(/(?<pin>[a-zA-Z]+)(\\[(?<w>\\d+)\\])?/)\n    ?.groups as {\n    pin: string;\n    w?: string;\n  };\n  return {\n    pin,\n    width: w ? Number(w) : 1,\n  };\n}\n\nexport function parseToPin(toPin: string): {\n  pin: string;\n  start?: number;\n  end?: number;\n} {\n  const { pin, i, j } = toPin.match(\n    /(?<pin>[a-z]+)(\\[(?<i>\\d+)(\\.\\.(?<j>\\d+))?\\])?/\n  )?.groups as { pin: string; i?: string; j?: string };\n  return {\n    pin,\n    start: i ? Number(i) : undefined,\n    end: j ? Number(j) : undefined,\n  };\n}\n\nexport class Pins {\n  private readonly map = new Map<string, Pin>();\n\n  insert(pin: Pin) {\n    const { name } = pin;\n    assert(!this.map.has(name), `Pins already has ${name}!`);\n    this.map.set(name, pin);\n  }\n\n  emplace(name: string, minWidth?: number) {\n    if (this.has(name)) {\n      return this.get(name)!;\n    } else {\n      const pin = new Bus(name, minWidth);\n      this.insert(pin);\n      return pin;\n    }\n  }\n\n  has(pin: string): boolean {\n    return this.map.has(pin);\n  }\n\n  get(pin: string): Pin | undefined {\n    return this.map.get(pin);\n  }\n\n  entries(): Iterable<Pin> {\n    return this.map.values();\n  }\n\n  [Symbol.iterator]() {\n    return this.map[Symbol.iterator]();\n  }\n}\n\nlet id = 0;\nexport class Chip {\n  readonly id = id++;\n  ins = new Pins();\n  outs = new Pins();\n  pins = new Pins();\n  parts = new Set<Chip>();\n  clockedPins: Set<string>;\n\n  get clocked() {\n    if (this.clockedPins.size > 0) {\n      return true;\n    }\n    for (const part of this.parts) {\n      if (part.clocked) return true;\n    }\n    return false;\n  }\n\n  constructor(\n    ins: (string | { pin: string; width: number })[],\n    outs: (string | { pin: string; width: number })[],\n    public name?: string,\n    internals: (string | { pin: string; width: number })[] = [],\n    clocked: string[] = []\n  ) {\n    for (const inn of ins) {\n      const { pin, width = 1 } =\n        (inn as { pin: string }).pin !== undefined\n          ? (inn as { pin: string; width: number })\n          : parsePinDecl(inn as string);\n      this.ins.insert(new Bus(pin, width));\n    }\n\n    for (const out of outs) {\n      const { pin, width = 1 } =\n        (out as { pin: string }).pin !== undefined\n          ? (out as { pin: string; width: number })\n          : parsePinDecl(out as string);\n      this.outs.insert(new Bus(pin, width));\n    }\n\n    for (const internal of internals) {\n      const { pin, width = 1 } =\n        (internal as { pin: string }).pin !== undefined\n          ? (internal as { pin: string; width: number })\n          : parsePinDecl(internal as string);\n      this.pins.insert(new Bus(pin, width));\n    }\n\n    this.clockedPins = new Set(clocked);\n\n    Clock.get().$.subscribe(() => this.eval());\n  }\n\n  reset() {\n    for (const [_, pin] of this.ins) {\n      pin.busVoltage = 0;\n    }\n    for (const part of this.parts) {\n      part.reset();\n    }\n    this.eval();\n  }\n\n  in(pin = \"in\"): Pin {\n    assert(this.hasIn(pin), `No in pin ${pin}`);\n    return this.ins.get(pin)!;\n  }\n\n  out(pin = \"out\"): Pin {\n    assert(this.hasOut(pin), `No in pin ${pin}`);\n    return this.outs.get(pin)!;\n  }\n\n  hasIn(pin: string): boolean {\n    return this.ins.has(pin);\n  }\n\n  hasOut(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  pin(name: string): Pin {\n    assert(this.pins.has(name));\n    return this.pins.get(name)!;\n  }\n\n  get(name: string, offset?: number): Pin | undefined {\n    if (this.ins.has(name)) {\n      return this.ins.get(name)!;\n    }\n    if (this.outs.has(name)) {\n      return this.outs.get(name)!;\n    }\n    if (this.pins.has(name)) {\n      return this.pins.get(name)!;\n    }\n    return this.getBuiltin(name, offset);\n  }\n\n  private getBuiltin(name: string, offset = 0): Pin | undefined {\n    if (BUILTIN_NAMES.includes(name)) {\n      for (const part of this.parts) {\n        const pin = part.get(name, offset);\n        if (pin) {\n          return pin;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  isOutPin(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  wire(part: Chip, connections: Connection[]) {\n    this.parts.add(part);\n    for (const { to, from } of connections) {\n      if (part.isOutPin(to.name)) {\n        this.wireOutPin(part, to, from);\n      } else {\n        this.wireInPin(part, to, from);\n      }\n    }\n  }\n\n  private findPin(from: string, minWidth?: number): Pin {\n    if (from.toLowerCase() === \"true\" || from === \"1\") {\n      return TRUE_BUS;\n    }\n    if (from.toLowerCase() === \"false\" || from === \"0\") {\n      return FALSE_BUS;\n    }\n    if (this.ins.has(from)) {\n      return this.ins.get(from)!;\n    }\n    if (this.outs.has(from)) {\n      return this.outs.get(from)!;\n    }\n    return this.pins.emplace(from, minWidth);\n  }\n\n  private wireOutPin(part: Chip, to: PinSide, from: PinSide) {\n    const partPin = assertExists(\n      part.outs.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    let chipPin = this.findPin(from.name, from.width ?? to.width);\n    const isInternal = this.pins.has(chipPin.name);\n\n    from.width ??= chipPin.width;\n\n    if (chipPin instanceof ConstantBus) {\n      throw new Error(`Cannot wire to constant bus`);\n    }\n\n    // Widen internal pins\n    if (isInternal && chipPin instanceof Bus) {\n      chipPin.ensureWidth(from.start + from.width);\n    }\n\n    // Wrap the chipPin in an InBus when the chip side is dimensioned\n    if (from.start > 0 || from.width !== chipPin.width) {\n      chipPin = new InSubBus(chipPin, from.start, from.width);\n    }\n\n    // Wrap the chipPin in an OutBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      chipPin = new OutSubBus(chipPin, to.start, to.width);\n    }\n\n    partPin.connect(chipPin);\n  }\n\n  private wireInPin(part: Chip, to: PinSide, from: PinSide) {\n    let partPin = assertExists(\n      part.ins.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    const chipPin = this.findPin(from.name, from.width ?? to.width);\n\n    from.width ??= chipPin.width;\n\n    // Wrap the partPin in an InBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      partPin = new InSubBus(partPin, to.start, to.width);\n    }\n\n    // Wrap the partPin in an OutBus when the chip side is dimensioned\n    if (![\"true\", \"false\"].includes(chipPin.name)) {\n      if (from.start > 0 || from.width !== chipPin.width) {\n        partPin = new OutSubBus(partPin, from.start, from.width);\n      }\n    }\n    chipPin.connect(partPin);\n  }\n\n  eval() {\n    for (const chip of this.parts) {\n      // TODO topological sort\n      // eval chip input busses\n      chip.eval();\n      // eval output busses\n    }\n  }\n\n  tick() {\n    this.eval();\n  }\n\n  tock() {\n    this.eval();\n  }\n\n  remove() {\n    for (const part of this.parts) {\n      part.remove();\n    }\n  }\n\n  // For the ROM32K builtin to load from a file system\n  async load(fs: FileSystem, path: string): Promise<void> {\n    for (const part of this.parts) {\n      if (part.name === \"ROM32K\") {\n        await part.load(fs, path);\n      }\n    }\n  }\n}\n\nexport class Low extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(FALSE_BUS);\n  }\n}\n\nexport class High extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(TRUE_BUS);\n  }\n}\n\nexport class ClockedChip extends Chip {\n  override get clocked(): boolean {\n    return true;\n  }\n\n  #subscription = Clock.get().$.subscribe(({ level }) => {\n    if (level === LOW) {\n      this.tock();\n    } else {\n      this.tick();\n    }\n  });\n\n  override remove() {\n    this.#subscription.unsubscribe();\n    super.remove();\n  }\n}\n\nexport interface PinSide {\n  name: string;\n  start: number;\n  width?: number;\n}\n\nexport interface Connection {\n  // To is the part side\n  to: PinSide;\n  // From is the chip side\n  from: PinSide;\n}\n\nexport type Pinout = Record<string, string>;\nexport interface SerializedChip {\n  id: number;\n  name: string;\n  ins: Pinout;\n  outs: Pinout;\n  pins: Pinout;\n  children: SerializedChip[];\n}\n\nfunction mask(width: number) {\n  return Math.pow(2, width) - 1;\n}\n\nfunction setBus(busses: Pinout, pin: Pin) {\n  busses[pin.name] = bin(\n    (pin.busVoltage & mask(pin.width)) <<\n      (pin as unknown as { start: number }).start ?? 0\n  );\n  return busses;\n}\n\nexport function printChip(chip: Chip): SerializedChip {\n  return {\n    id: chip.id,\n    name: chip.name ?? chip.constructor.name,\n    ins: [...chip.ins.entries()].reduce(setBus, {} as Pinout),\n    outs: [...chip.outs.entries()].reduce(setBus, {} as Pinout),\n    pins: [...chip.pins.entries()].reduce(setBus, {} as Pinout),\n    children: [...chip.parts.values()].map(printChip),\n  };\n}\n\nexport const BUILTIN_NAMES = [\n  \"Register\",\n  \"ARegister\",\n  \"DRegister\",\n  \"PC\",\n  \"RAM8\",\n  \"RAM64\",\n  \"RAM512\",\n  \"RAM4K\",\n  \"RAM16K\",\n  \"ROM32K\",\n  \"Screen\",\n  \"Keyboard\",\n  \"Memory\",\n];\n","import { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { HIGH, LOW, Voltage } from \"./chip.js\";\n\ninterface Tick {\n  readonly level: Voltage;\n  readonly ticks: number;\n}\n\nlet clock: Clock;\nexport class Clock {\n  private level: Voltage = LOW;\n  private ticks = 0;\n\n  static get() {\n    if (clock === undefined) {\n      clock = new Clock();\n    }\n    return clock;\n  }\n\n  get isHigh(): boolean {\n    return this.level === HIGH;\n  }\n\n  get isLow(): boolean {\n    return this.level === LOW;\n  }\n\n  private subject = new BehaviorSubject<Tick>({\n    level: this.level,\n    ticks: this.ticks,\n  });\n  readonly frameSubject = new Subject<void>();\n\n  readonly $: Observable<Tick> = this.subject;\n  readonly frame$: Observable<void> = this.frameSubject;\n\n  private next() {\n    this.subject.next({\n      level: this.level,\n      ticks: this.ticks,\n    });\n  }\n\n  private constructor() {\n    // private\n  }\n\n  reset() {\n    this.level = LOW;\n    this.ticks = 0;\n    this.next();\n  }\n\n  tick() {\n    assert(this.level === LOW, \"Can only tick up from LOW\");\n    this.level = HIGH;\n    this.next();\n  }\n\n  tock() {\n    assert(this.level === HIGH, \"Can only tock down from HIGH\");\n    this.level = LOW;\n    this.ticks += 1;\n    this.next();\n  }\n\n  toggle() {\n    this.level === HIGH ? this.tock() : this.tick();\n  }\n\n  eval() {\n    this.tick();\n    this.tock();\n  }\n\n  frame() {\n    this.frameSubject.next();\n  }\n\n  toString() {\n    return `${this.ticks}${this.level === HIGH ? \"+\" : \"\"}`;\n  }\n}\n","export type COMMANDS_ASM =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"D\"\n  | \"A\"\n  | \"M\"\n  | \"!D\"\n  | \"!A\"\n  | \"-D\"\n  | \"-A\"\n  | \"D+1\"\n  | \"A+1\"\n  | \"D-1\"\n  | \"A-1\"\n  | \"D+A\"\n  | \"D-A\"\n  | \"D-M\"\n  | \"A-D\"\n  | \"D&A\"\n  | \"D&M\"\n  | \"D|A\"\n  | \"D|M\";\n\nexport type COMMANDS_OP =\n  | 0b101010\n  | 0b111111\n  | 0b111010\n  | 0b001100\n  | 0b110000\n  | 0b110000\n  | 0b001101\n  | 0b110001\n  | 0b001111\n  | 0b110011\n  | 0b011111\n  | 0b110111\n  | 0b001110\n  | 0b110010\n  | 0b000010\n  | 0b010011\n  | 0b010011\n  | 0b000111\n  | 0b000000\n  | 0b000000\n  | 0b010101\n  | 0b010101;\n\nexport const COMMANDS: {\n  asm: Record<COMMANDS_ASM, COMMANDS_OP>;\n  op: Record<COMMANDS_OP, COMMANDS_ASM>;\n} = {\n  asm: {\n    \"0\": 0b101010, // 42 0x2A\n    \"1\": 0b111111, // 63 0x3F\n    \"-1\": 0b111010, // 58 0x3A\n    D: 0b001100, // 12 0x0C\n    A: 0b110000, // 48 0x30\n    M: 0b110000, // 48 0x30\n    \"!D\": 0b001101, // 13 0x0D\n    \"!A\": 0b110001, // 49 0x31\n    \"-D\": 0b001111, // 15 0x0F\n    \"-A\": 0b110011, // 51 0x33\n    \"D+1\": 0b011111, // 31 0x1F\n    \"A+1\": 0b110111, // 55 0x37\n    \"D-1\": 0b001110, // 14 0x0E\n    \"A-1\": 0b110010, // 50 0x32\n    \"D+A\": 0b000010, //  2 0x02\n    \"D-A\": 0b010011, // 19 0x13\n    \"D-M\": 0b010011, // 19 0x13\n    \"A-D\": 0b000111, //  7 0x07\n    \"D&A\": 0b000000, //  0 0x00\n    \"D&M\": 0b000000, //  0 0x00\n    \"D|A\": 0b010101, // 21 0x15\n    \"D|M\": 0b010101, // 21 0x15\n  },\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"D\",\n    0x30: \"A\",\n    0x0d: \"!D\",\n    0x31: \"!A\",\n    0x0f: \"-D\",\n    0x33: \"-A\",\n    0x1f: \"D+1\",\n    0x37: \"A+1\",\n    0x0e: \"D-1\",\n    0x32: \"A-1\",\n    0x02: \"D+A\",\n    0x13: \"D-A\",\n    0x07: \"A-D\",\n    0x00: \"D&A\",\n    0x15: \"D|A\",\n  },\n};\n\nexport type ASSIGN_ASM = \"\" | \"M\" | \"D\" | \"MD\" | \"A\" | \"AM\" | \"AD\" | \"AMD\";\nexport type ASSIGN_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport const ASSIGN: {\n  asm: Record<ASSIGN_ASM, ASSIGN_OP>;\n  op: Record<ASSIGN_OP, ASSIGN_ASM>;\n} = {\n  asm: {\n    \"\": 0x0,\n    M: 0b001,\n    D: 0b010,\n    MD: 0b011,\n    A: 0b100,\n    AM: 0b101,\n    AD: 0b110,\n    AMD: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"M\",\n    0x2: \"D\",\n    0x3: \"MD\",\n    0x4: \"A\",\n    0x5: \"AM\",\n    0x6: \"AD\",\n    0x7: \"AMD\",\n  },\n};\n\nexport type JUMP_ASM =\n  | \"\"\n  | \"JGT\"\n  | \"JEQ\"\n  | \"JGE\"\n  | \"JLT\"\n  | \"JNE\"\n  | \"JLE\"\n  | \"JMP\";\nexport type JUMP_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport const JUMP: {\n  asm: Record<JUMP_ASM, JUMP_OP>;\n  op: Record<JUMP_OP, JUMP_ASM>;\n} = {\n  asm: {\n    \"\": 0b0,\n    JGT: 0b001,\n    JEQ: 0b010,\n    JGE: 0b011,\n    JLT: 0b100,\n    JNE: 0b101,\n    JLE: 0b110,\n    JMP: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"JGT\",\n    0x2: \"JEQ\",\n    0x3: \"JGE\",\n    0x4: \"JLT\",\n    0x5: \"JNE\",\n    0x6: \"JLE\",\n    0x7: \"JMP\",\n  },\n};\n\nexport const Flags = {\n  0x01: \"Positive\",\n  0x00: \"Zero\",\n  0x0f: \"Negative\",\n  Positive: 0x01,\n  Zero: 0x00,\n  Negative: 0x0f,\n};\n\nexport function alu(op: number, d: number, a: number): [number, number] {\n  let o = 0;\n  switch (op) {\n    case 0x2a:\n      o = 0;\n      break;\n    case 0x3f:\n      o = 1;\n      break;\n    case 0x3a:\n      o = -1;\n      break;\n    case 0x0c:\n      o = d;\n      break;\n    case 0x30:\n      o = a;\n      break;\n    case 0x0d:\n      o = ~d;\n      break;\n    case 0x31:\n      o = ~a;\n      break;\n    case 0x0f:\n      o = -d;\n      break;\n    case 0x33:\n      o = -a;\n      break;\n    case 0x1f:\n      o = d + 1;\n      break;\n    case 0x37:\n      o = a + 1;\n      break;\n    case 0x0e:\n      o = d - 1;\n      break;\n    case 0x32:\n      o = a - 1;\n      break;\n    case 0x02:\n      o = d + a;\n      break;\n    case 0x13:\n      o = d - a;\n      break;\n    case 0x07:\n      o = a - d;\n      break;\n    case 0x00:\n      o = d & a;\n      break;\n    case 0x15:\n      o = d | a;\n      break;\n  }\n\n  o = o & 0xffff;\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n","import { alu, COMMANDS_OP, Flags } from \"./alu.js\";\nimport { Memory } from \"./memory.js\";\n\nexport interface CPUInput {\n  inM: number;\n  instruction: number;\n  reset: boolean;\n}\n\nexport interface CPUOutput {\n  outM: number;\n  writeM: boolean;\n  addressM: number;\n}\n\nexport interface CPUState {\n  A: number;\n  D: number;\n  PC: number;\n  ALU: number;\n  flag: number;\n}\n\nexport function emptyState(): CPUState {\n  return { A: 0, D: 0, PC: 0, ALU: 0, flag: Flags.Zero };\n}\n\nconst BITS = {\n  c: 0b1000_0000_0000_0000,\n  x1: 0b1001_0000_0000_0000,\n  x2: 0b1001_0000_0000_0000,\n  am: 0b1001_0000_0000_0000,\n  op: 0b0000_1111_1100_0000,\n  d1: 0b1000_0000_0010_0000,\n  d2: 0b1000_0000_0001_0000,\n  d3: 0b1000_0000_0000_1000,\n  j1: 0b1000_0000_0000_0001,\n  j2: 0b1000_0000_0000_0010,\n  j3: 0b1000_0000_0000_0100,\n};\n\nexport function decode(instruction: number) {\n  function bit(bit: number): boolean {\n    return (instruction & bit) === bit;\n  }\n  const bits = {\n    c: bit(BITS.c),\n    x1: bit(BITS.x1),\n    x2: bit(BITS.x2),\n    am: bit(BITS.am),\n    op: ((instruction & BITS.op) >> 6) as COMMANDS_OP,\n    d1: bit(BITS.d1),\n    d2: bit(BITS.d2),\n    d3: bit(BITS.d3),\n    j1: bit(BITS.j1),\n    j2: bit(BITS.j2),\n    j3: bit(BITS.j3),\n  };\n\n  return bits;\n}\n\nexport function cpuTick(\n  { inM, instruction }: CPUInput,\n  { A, D, PC }: CPUState\n): [CPUState, boolean] {\n  const bits = decode(instruction);\n  const a = bits.am ? inM : A;\n  const [ALU, flag] = alu(bits.op, D, a);\n\n  return [{ A, D, PC: PC + 1, ALU, flag }, bits.d3];\n}\n\nexport function cpuTock(\n  { inM, instruction, reset }: CPUInput,\n  { A, D, PC, ALU, flag }: CPUState\n): [CPUOutput, CPUState] {\n  const bits = decode(instruction);\n\n  const j1 = bits.j1 && flag === Flags.Positive;\n  const j2 = bits.j2 && flag === Flags.Zero;\n  const j3 = bits.j3 && flag === Flags.Negative;\n  const jmp = j1 || j2 || j3;\n\n  PC = reset ? 0 : jmp ? A : PC;\n\n  if (bits.d2) {\n    D = ALU;\n  }\n\n  if (!bits.c) {\n    A = instruction & 0x7fff;\n  } else if (bits.d1) {\n    A = ALU;\n  }\n\n  const a = bits.am ? inM : A;\n  const alu2 = alu(bits.op, D, a);\n\n  ALU = alu2[0];\n  flag = alu2[1];\n\n  const output: CPUOutput = {\n    addressM: A,\n    outM: ALU,\n    writeM: bits.d3,\n  };\n\n  const state: CPUState = {\n    A,\n    D,\n    ALU,\n    flag,\n    PC,\n  };\n\n  return [output, state];\n}\n\nexport function cpu(input: CPUInput, state: CPUState): [CPUOutput, CPUState] {\n  const [tickState, _writeM] = cpuTick(input, state);\n  return cpuTock(input, tickState);\n}\n\nexport class CPU {\n  RAM: Memory;\n  ROM: Memory;\n\n  #pc = 0;\n  #a = 0;\n  #d = 0;\n\n  #tickState: CPUState = {\n    A: 0,\n    D: 0,\n    PC: 0,\n    ALU: 0,\n    flag: Flags.Zero,\n  };\n\n  get state(): CPUState {\n    return this.#tickState;\n  }\n\n  get PC() {\n    return this.#pc;\n  }\n\n  get A() {\n    return this.#a;\n  }\n\n  get D() {\n    return this.#d;\n  }\n\n  constructor({\n    RAM = new Memory(0x7fff),\n    ROM,\n  }: {\n    RAM?: Memory;\n    ROM: Memory;\n  }) {\n    this.RAM = RAM;\n    this.ROM = ROM;\n  }\n\n  reset() {\n    this.#pc = 0;\n    this.#a = 0;\n    this.#d = 0;\n  }\n\n  tick() {\n    const [{ addressM, outM, writeM }, { A, D, PC }] = cpu(\n      {\n        inM: this.RAM.get(this.#a),\n        instruction: this.ROM.get(this.#pc),\n        reset: false,\n      },\n      {\n        A: this.#a,\n        D: this.#d,\n        PC: this.#pc,\n        ALU: this.#d,\n        flag: Flags.Zero,\n      }\n    );\n\n    this.#a = A;\n    this.#d = D;\n    this.#pc = PC;\n\n    if (writeM) {\n      this.RAM.set(addressM, outM);\n    }\n  }\n}\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Subject } from \"rxjs\";\nimport { op } from \"../util/asm.js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { load } from \"../fs.js\";\n\nexport const FORMATS = [\"bin\", \"dec\", \"hex\", \"asm\"];\nexport type Format = typeof FORMATS[number];\n\nexport const SCREEN = 0x4000;\nexport const SCREEN_ROWS = 512;\nexport const SCREEN_COLS = 256;\nexport const KEYBOARD = 0x6000;\n\nexport class Memory {\n  #memory: Int16Array;\n  updates = new Subject<void>();\n\n  get size(): number {\n    return this.#memory.length;\n  }\n\n  constructor(memory: ArrayBuffer | number) {\n    if (typeof memory === \"number\") {\n      this.#memory = new Int16Array(memory);\n    } else {\n      this.#memory = new Int16Array(memory);\n    }\n  }\n\n  get(index: number): number {\n    if (index < 0 || index >= this.size) {\n      return 0xffff;\n    }\n    return this.#memory[index] ?? 0;\n  }\n\n  set(index: number, value: number): void {\n    if (index >= 0 && index < this.size) {\n      this.#memory[index] = value & 0xffff;\n    }\n  }\n\n  update(cell: number, value: string, format: Format) {\n    let current: number;\n    switch (format) {\n      case \"asm\":\n        current = op(value);\n        break;\n      case \"bin\":\n        current = int2(value);\n        break;\n      case \"hex\":\n        current = int16(value);\n        break;\n      case \"dec\":\n      default:\n        current = int10(value);\n        break;\n    }\n\n    if (isFinite(current) && current <= 0xffff) {\n      this.set(cell, current);\n      this.updates.next();\n    }\n  }\n\n  async load(fs: FileSystem, path: string) {\n    try {\n      (await load(fs, path)).map((v, i) => this.set(i, v));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`Memory Failed to load file ${path}`);\n    }\n  }\n\n  range(start = 0, end = this.size): number[] {\n    return [...this.#memory.slice(start, end)];\n  }\n\n  *map<T>(\n    fn: (index: number, value: number) => T,\n    start = 0,\n    end = this.size\n  ): Iterable<T> {\n    assert(start < end);\n    for (let i = start; i < end; i++) {\n      yield fn(i, this.get(i));\n    }\n  }\n}\n","const asm = `\nASM <: Base {\n  Root := ASM\n  ASM = Instruction*\n  \n  Instruction = Label|AInstruction|CInstruction\n  \n  Label = OpenParen identifier closeParen\n  AInstruction = at (identifier | decNumber)\n  CInstruction = assign? op jmp?\n  \n  assign = (\n      \"AMD\"\n      | \"AM\"\n      | \"AD\"\n      | \"MD\"\n      | \"M\"\n      | \"D\"\n      | \"A\"\n      ) equal\n      \n  op =\n      | \"0\" | \"1\" | \"-1\"\n      | \"!D\" | \"!A\" | \"!M\"\n      | \"-D\" | \"-A\" | \"-M\"\n      | \"D+1\" | \"A+1\" | \"M+1\"\n      | \"D-1\" | \"A-1\" | \"M-1\"\n      | \"D+A\" | \"D+M\"\n      | \"D-A\" | \"D-M\"\n      | \"A-D\" | \"M-D\"\n      | \"D&A\" | \"D&M\"\n      | \"D|A\" | \"D|M\"\n      | \"D\" | \"A\" | \"M\"\n\n\n  jmp = semi (\"JGT\" | \"JEQ\" | \"JGE\" | \"JLT\" | \"JNE\" | \"JLE\" | \"JMP\")\n}`;\nexport default asm;\n","import { assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport ohm from \"ohm-js\";\nimport {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\nimport { KEYBOARD, SCREEN } from \"../cpu/memory.js\";\nimport { makeC } from \"../util/asm.js\";\nimport { grammars, makeParser, baseSemantics } from \"./base.js\";\n\nimport asmGrammar from \"./grammars/asm.ohm.js\";\n\nexport const grammar = ohm.grammar(asmGrammar, grammars);\nexport const asmSemantics = grammar.extendSemantics(baseSemantics);\n\nexport interface Asm {\n  instructions: AsmInstruction[];\n}\n\nexport type AsmInstruction =\n  | AsmAInstruction\n  | AsmCInstruction\n  | AsmLabelInstruction;\n\nexport type AsmAInstruction = AsmALabelInstruction | AsmAValueInstruction;\nexport interface AsmALabelInstruction {\n  type: \"A\";\n  label: string;\n}\n\nexport interface AsmAValueInstruction {\n  type: \"A\";\n  value: number;\n}\n\nfunction isALabelInstruction(\n  inst: AsmAInstruction\n): inst is AsmALabelInstruction {\n  return (inst as AsmALabelInstruction).label !== undefined;\n}\n\nexport interface AsmCInstruction {\n  type: \"C\";\n  op: COMMANDS_OP;\n  isM: boolean;\n  store?: ASSIGN_OP;\n  jump?: JUMP_OP;\n}\n\nexport interface AsmLabelInstruction {\n  type: \"L\";\n  label: string;\n}\n\nasmSemantics.addAttribute<Asm>(\"root\", {\n  Root(_) {\n    return this.asm;\n  },\n});\n\nasmSemantics.addAttribute<Asm>(\"asm\", {\n  Root(asm) {\n    return {\n      instructions: asm\n        .child(0)\n        .children.map(({ instruction }) => instruction as AsmInstruction),\n    };\n  },\n});\n\nasmSemantics.addAttribute<AsmInstruction>(\"instruction\", {\n  AInstruction(_at, val): AsmAInstruction {\n    try {\n      return {\n        type: \"A\",\n        label: val.name,\n      };\n    } catch (e) {\n      // Pass\n    }\n\n    try {\n      return {\n        type: \"A\",\n        value: val.value,\n      };\n    } catch (e) {\n      // pass\n    }\n\n    throw new Error(`AsmAInstruction must have either a name or a value`);\n  },\n  CInstruction(assignN, opN, jmpN): AsmCInstruction {\n    const assign = assignN.child(0)?.child(0)?.sourceString as ASSIGN_ASM;\n    const op = opN.sourceString.replace(\"M\", \"A\") as COMMANDS_ASM;\n    const jmp = jmpN.child(0)?.child(1)?.sourceString as JUMP_ASM;\n    const isM =\n      assignN.sourceString.includes(\"M\") || opN.sourceString.includes(\"M\");\n    const inst: AsmCInstruction = {\n      type: \"C\",\n      op: COMMANDS.asm[op],\n      isM,\n    };\n    if (jmp) inst.jump = JUMP.asm[jmp];\n    if (assign) inst.store = ASSIGN.asm[assign];\n    return inst;\n  },\n  Label(_o, { name }, _c): AsmLabelInstruction {\n    return {\n      type: \"L\",\n      label: name,\n    };\n  },\n});\n\nexport function fillLabel(asm: Asm) {\n  let nextLabel = 16;\n  const symbols = new Map<string, number>([\n    [\"R0\", 0],\n    [\"R1\", 1],\n    [\"R2\", 2],\n    [\"R3\", 3],\n    [\"R4\", 4],\n    [\"R5\", 5],\n    [\"R6\", 6],\n    [\"R7\", 7],\n    [\"R8\", 8],\n    [\"R9\", 9],\n    [\"R10\", 10],\n    [\"R11\", 11],\n    [\"R12\", 12],\n    [\"R13\", 13],\n    [\"R14\", 14],\n    [\"R15\", 15],\n    [\"SP\", 0],\n    [\"LCL\", 1],\n    [\"ARG\", 2],\n    [\"THIS\", 3],\n    [\"THAT\", 4],\n    [\"SCREEN\", SCREEN],\n    [\"KBD\", KEYBOARD],\n  ]);\n\n  function getLabelValue(label: string) {\n    if (!symbols.has(label)) {\n      symbols.set(label, nextLabel);\n      nextLabel += 1;\n    }\n    return assertExists(symbols.get(label), `Label not in symbols: ${label}`);\n  }\n\n  function transmuteAInstruction(instruction: AsmALabelInstruction) {\n    const value = getLabelValue(instruction.label);\n    (instruction as unknown as AsmAValueInstruction).value = value;\n    delete (instruction as unknown as { label: undefined }).label;\n  }\n\n  const unfilled: AsmALabelInstruction[] = [];\n  let line = 0;\n  for (const instruction of asm.instructions) {\n    if (instruction.type === \"L\") {\n      if (symbols.has(instruction.label)) {\n        throw new Error(`ASM Duplicate label ${instruction.label}`);\n      } else {\n        symbols.set(instruction.label, line);\n      }\n      continue;\n    }\n\n    line += 1;\n\n    if (instruction.type === \"A\") {\n      if (isALabelInstruction(instruction)) {\n        unfilled.push(instruction);\n      }\n    }\n  }\n\n  unfilled.forEach(transmuteAInstruction);\n}\n\nexport function emit(asm: Asm): number[] {\n  return asm.instructions\n    .map((inst) => {\n      if (inst.type === \"A\") {\n        if (isALabelInstruction(inst)) {\n          throw new Error(`ASM Emitting unfilled A instruction`);\n        }\n        return inst.value;\n      }\n      if (inst.type === \"C\") {\n        return makeC(inst.isM, inst.op, inst.store, inst.jump);\n      }\n      return undefined;\n    })\n    .filter((op): op is number => op !== undefined);\n}\n\nexport const ASM = {\n  grammar: asmGrammar,\n  semantics: asmSemantics,\n  parser: grammar,\n  parse: makeParser<Asm>(grammar, asmSemantics),\n  passes: {\n    fillLabel,\n    emit,\n  },\n};\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { unwrap } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ASM } from \"./languages/asm.js\";\nimport { int2 } from \"./util/twos.js\";\n\nexport async function load(fs: FileSystem, path: string): Promise<number[]> {\n  if (path.endsWith(\".hack\")) {\n    return loadHack(fs, path);\n  }\n\n  if (path.endsWith(\".asm\")) {\n    return loadAsm(fs, path);\n  }\n\n  throw new Error(`Cannot load file without hack or asm extension ${path}`);\n}\n\nexport async function loadAsm(fs: FileSystem, path: string): Promise<number[]> {\n  const source = await fs.readFile(path);\n  const asm = unwrap(ASM.parse(source));\n  ASM.passes.fillLabel(asm);\n  return ASM.passes.emit(asm);\n}\n\nexport async function loadHack(\n  fs: FileSystem,\n  path: string\n): Promise<number[]> {\n  return (await fs.readFile(path))\n    .split(\"\\n\")\n    .filter((line) => line.trim() !== \"\")\n    .map(int2);\n}\n","import ohm from \"ohm-js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\n\nexport const UNKNOWN_PARSE_ERROR = `Unknown parse error`;\n\nimport baseGrammar from \"./grammars/base.ohm.js\";\nexport const grammars = {\n  Base: ohm.grammar(baseGrammar),\n};\n\nexport const baseSemantics = grammars.Base.createSemantics();\n\nbaseSemantics.extendOperation(\"asIteration\", {\n  List(list, _) {\n    return list.asIteration();\n  },\n});\n\nbaseSemantics.addAttribute(\"value\", {\n  decNumber(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  wholeDec(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  binNumber(_, digits) {\n    return int2(digits.sourceString);\n  },\n  hexNumber(_, digits) {\n    return int16(digits.sourceString);\n  },\n  Number(num) {\n    return num.value;\n  },\n  Name(ident) {\n    return ident.name;\n  },\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n});\n\nbaseSemantics.addAttribute(\"name\", {\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n  Name(_): string {\n    return this.child(0)?.name;\n  },\n});\n\nbaseSemantics.addAttribute(\"String\", {\n  String(_a, str, _b) {\n    return str.sourceString;\n  },\n});\n\nexport type ParseError = Error | { message: string; shortMessage: string };\n\nexport function makeParser<ResultType>(\n  grammar: ohm.Grammar,\n  semantics: ohm.Semantics,\n  property: (obj: ohm.Dict) => ResultType = ({ root }) => root\n): (source: string) => Result<ResultType, ParseError> {\n  return function parse(source) {\n    try {\n      const match = grammar.match(source);\n      if (match.succeeded()) {\n        const parsed = semantics(match);\n        const parse = property(parsed);\n        return Ok(parse);\n      } else {\n        return Err({\n          message: match.message ?? UNKNOWN_PARSE_ERROR,\n          shortMessage: match.shortMessage ?? UNKNOWN_PARSE_ERROR,\n        });\n      }\n    } catch (e) {\n      return Err(e as Error);\n    }\n  };\n}\n\nexport interface Span {\n  start: number;\n  end: number;\n}\n","const base = `\nBase {\n  Root = Value*\n\n  At = at\n  Bang = bang\n  Bar = bar\n  CloseAngle = closeAngle\n  CloseBrace = closeBrace\n  CloseParen = closeParen\n  CloseSquare = closeSquare\n  Comma = comma\n  Dollar = dollar\n  Dot = dot\n  DoubleQuote = doubleQuote\n  Equal = equal\n  OpenAngle = openAngle\n  OpenBrace = openBrace\n  OpenParen = openParen\n  OpenSquare = openSquare\n  Percent = percent\n  Semi = semi\n  Underscore = underscore\n\n  at = \"@\"\n  bang = \"!\"\n  bar = \"|\"\n  closeAngle = \">\"\n  closeBrace = \"}\"\n  closeParen = \")\"\n  closeSquare = \"]\"\n  comma = \",\"\n  dollar = \"$\"\n  dot = \".\"\n  doubleQuote = \"\\\\\"\"\n  equal = \"=\"\n  minus = \"-\"\n  newline = \"\\\\r\"? \"\\\\n\"\n  openAngle = \"<\"\n  openBrace = \"{\"\n  openParen = \"(\"\n  openSquare = \"[\"\n  percent = \"%\"\n  semi = \";\"\n  underscore = \"_\"\n\n  Value = identifier | number | boolean\n\n  boolean = true | false\n  True = true\n  False = false\n  true = \"true\"\n  false = \"false\"\n\n  Name = identifier\n  identifier = (letter|underscore) (alnum|underscore|dot|dollar)*\n\n  Number = number\n  number = hexNumber | decNumber | binNumber\n  binNumber = (\"%B\") (\"0\"|\"1\")+\n  hexNumber = (\"%X\") hexDigit+\n  decNumber = (\"%D\")? (wholeDec | realDec)\n  wholeDec = minus? digit+\n  realDec = minus? digit* \".\" digit+\n\n  String = DoubleQuote (~doubleQuote any)* doubleQuote\n  \n  spaces := (lineComment | comment | space)*\n  commentStart = \"/*\"\n  commentEnd = \"*/\"\n  comment = commentStart (~commentEnd any)* commentEnd\n  lineCommentStart = \"//\"\n  lineComment = lineCommentStart (~\"\\\\n\" any)* \"\\\\n\"\n\n  List<elem, sep> = NonemptyListOf<elem, sep> sep?\n  EmptyList<elem, sep> = EmptyList<elem, sep> sep?\n}`;\nexport default base;\n","const cmp = `\nCmp <: Base {\n  Root := line*\n  line = bar cell+ newline?\n  cell = cellvalue bar\n  cellvalue = (~(bar|newline) any)*\n}`;\nexport default cmp;\n","import ohm from \"ohm-js\";\nimport { grammars, makeParser, baseSemantics } from \"./base.js\";\n\nexport type Cell = string;\nexport type Line = Cell[];\nexport type Cmp = Line[];\n\nimport cmpGrammar from \"./grammars/cmp.ohm.js\";\nexport const grammar = ohm.grammar(cmpGrammar, grammars);\nexport const cmpSemantics = grammar.extendSemantics(baseSemantics);\n\ncmpSemantics.addAttribute<Cell>(\"cell\", {\n  cell(value, _) {\n    return value.sourceString;\n  },\n});\n\ncmpSemantics.addAttribute<Line>(\"line\", {\n  line(_a, cells, _b) {\n    return cells.children.map((c) => c.cell);\n  },\n});\n\ncmpSemantics.addAttribute<Cmp>(\"root\", {\n  Root(lines) {\n    return lines.children.map((c) => c.line);\n  },\n});\n\nexport const CMP = {\n  grammar: cmpGrammar,\n  semantics: cmpSemantics,\n  parser: grammar,\n  parse: makeParser<Cmp>(grammar, cmpSemantics),\n};\n","const hdl = `\nHdl <: Base{\n  Root := Chip\n  Chip = \"CHIP\" Name OpenBrace ChipBody CloseBrace\n  ChipBody = InList? OutList? PartList ClockedList?\n  InList = \"IN\" PinList Semi\n  OutList = \"OUT\" PinList Semi\n  PartList = BuiltinPart | Parts\n  PinList = List<PinDecl, Comma>\n  PinDecl = Name PinWidth?\n  PinWidth = OpenSquare decNumber CloseSquare\n  BuiltinPart = \"BUILTIN\" Semi\n  Parts = \"PARTS:\" Part*\n  Part = Name \"(\" Wires \")\" Semi\n  Wires = List<Wire, Comma>\n  Wire = WireSide Equal (WireSide | True | False) \n  WireSide = Name SubBus? \n  SubBus = OpenSquare decNumber subBusRest? CloseSquare\n  subBusRest = \"..\" decNumber\n  ClockedList = \"CLOCKED\" SimplePinList Semi\n  SimplePinList = List<Name, Comma>\n}`;\nexport default hdl;\n","/** Reads and parses HDL chip descriptions. */\nimport ohm from \"ohm-js\";\nimport { grammars, baseSemantics } from \"./base.js\";\nimport { makeParser } from \"./base.js\";\n\nexport interface PinIndex {\n  start?: number | undefined;\n  end?: number | undefined;\n}\n\nexport interface PinParts extends PinIndex {\n  pin: string;\n}\n\nexport interface PinDeclaration {\n  pin: string | string;\n  width: number;\n}\n\nexport interface Wire {\n  lhs: PinParts;\n  rhs: PinParts;\n}\n\nexport interface Part {\n  name: string;\n  wires: Wire[];\n}\n\nexport interface HdlParse {\n  name: string;\n  ins: PinDeclaration[];\n  outs: PinDeclaration[];\n  clocked: string[];\n  parts: \"BUILTIN\" | Part[];\n}\n\nimport hdlGrammar from \"./grammars/hdl.ohm.js\";\nexport const grammar = ohm.grammar(hdlGrammar, grammars);\n\nexport const hdlSemantics = grammar.extendSemantics(baseSemantics);\n\nhdlSemantics.addAttribute<PinIndex>(\"SubBus\", {\n  SubBus(_a, startNode, endNode, _b) {\n    const start = startNode.value;\n    const end = endNode.child(0)?.child(1)?.value ?? start;\n    return { start, end };\n  },\n});\n\nhdlSemantics.addAttribute<PinParts>(\"WireSide\", {\n  WireSide({ name }, index) {\n    const { start, end } = (index.child(0)?.SubBus as PinIndex) ?? {\n      start: undefined,\n      end: undefined,\n    };\n    return { pin: name, start, end };\n  },\n});\n\nhdlSemantics.addAttribute<Wire>(\"Wire\", {\n  Wire(left, _, right) {\n    const rhs: PinParts = right.isTerminal()\n      ? { pin: right.sourceString }\n      : right.WireSide;\n    return { lhs: left.WireSide as PinParts, rhs };\n  },\n});\n\nhdlSemantics.addAttribute<Wire[]>(\"Wires\", {\n  Wires(list) {\n    return list.asIteration().children.map(({ Wire }: { Wire: Wire }) => Wire);\n  },\n});\n\nhdlSemantics.addAttribute<Part>(\"Part\", {\n  Part({ name }, _a, { Wires }, _b, _c) {\n    return { name: name as string, wires: Wires as Wire[] };\n  },\n});\n\nhdlSemantics.addAttribute<Part[] | \"BUILTIN\">(\"Parts\", {\n  Parts(_, parts) {\n    return parts.children.map((c) => c.Part);\n  },\n  BuiltinPart(_a, _b) {\n    return \"BUILTIN\";\n  },\n});\n\nhdlSemantics.addAttribute<\"BUILTIN\" | Part[]>(\"PartList\", {\n  PartList(list) {\n    return list.Parts;\n  },\n});\n\nhdlSemantics.addAttribute<string[]>(\"Clocked\", {\n  ClockedList(_a, clocked, _b) {\n    return (\n      clocked\n        .asIteration()\n        .children.map(\n          ({ sourceString }: { sourceString: string }) => sourceString\n        ) ?? []\n    );\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration>(\"PinDecl\", {\n  PinDecl({ name }, width) {\n    return {\n      pin: name,\n      width: width.child(0)?.child(1)?.value ?? 1,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration[]>(\"PinList\", {\n  PinList(list) {\n    return list\n      .asIteration()\n      .children.map(({ PinDecl }: { PinDecl: PinDeclaration }) => PinDecl);\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Chip\", {\n  Chip(_a, { name }, _b, body, _c) {\n    return {\n      name,\n      ins: body.child(0).child(0)?.child(1)?.PinList ?? [],\n      outs: body.child(1).child(0)?.child(1)?.PinList ?? [],\n      parts: body.child(2).PartList ?? [],\n      clocked: body.child(3).child(0)?.Clocked,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Root\", {\n  Root(root) {\n    return root.child(0)?.Chip;\n  },\n});\n\nexport const HDL = {\n  parser: grammar,\n  grammar: hdlGrammar,\n  semantics: hdlSemantics,\n  parse: makeParser<HdlParse>(grammar, hdlSemantics, (n) => n.Chip),\n};\n","const tst = `\nTst <: Base {\n  Root := Tst\n  Tst = (TstStatement | TstRepeat | TstWhile)+\n\n  TstRepeat = Repeat Number? OpenBrace TstStatement+ CloseBrace\n  TstWhile = While Condition OpenBrace TstStatement+ CloseBrace\n  TstStatement = List<TstOperation, \",\"> (Semi | Bang)\n\n  TstOperation =\n    | TstFileOperation\n    | TstOutputListOperation\n    | TstEvalOperation\n    | TstSetOperation\n    | TstOutputOperation\n    | TstEchoOperation\n    | TstClearEchoOperation\n    | TstLoadROMOperation\n\n  TstLoadROMOperation = ROM32K Load FileName\n  TstFileOperation = FileOperation FileName\n  TstOutputListOperation = \"output-list\" OutputFormat+\n  OutputFormat = Name Index? percent FormatStyle wholeDec dot wholeDec dot wholeDec\n  TstSetOperation = Set Name Index? Number\n  Index = OpenSquare wholeDec? CloseSquare\n  Condition = Value CompareOp Value\n  TstEvalOperation = Eval | Tick | Tock\n  TstOutputOperation = Output\n  TstEchoOperation = Echo String\n  TstClearEchoOperation = ClearEcho\n\n  FileName = Name\n  FileOperation = \"load\" | \"output-file\" | \"compare-to\"\n\n  Set = \"set\"\n  Eval = \"eval\"\n  Tick = \"tick\"\n  Tock = \"tock\"\n  Echo = \"echo\"\n  Repeat = \"repeat\"\n  ClearEcho = \"clear-echo\"\n  Output = \"output\"\n  OutputList = \"output-list\"\n  FormatStyle = \"B\"|\"D\"|\"S\"|\"X\"\n  ROM32K = \"ROM32K\"\n  Load = \"load\"\n  While = \"while\"\n\n  CompareOp = \"<>\" | \"<=\" | \">=\" | \"=\" | \"<\" | \">\"\n}`;\nexport default tst;\n","/** Reads tst files to apply and perform test runs. */\n\nimport ohm from \"ohm-js\";\nimport { baseSemantics, grammars, makeParser, Span } from \"./base.js\";\n\nexport interface TstEchoOperation {\n  op: \"echo\";\n  message: string;\n}\n\nexport interface TstClearEchoOperation {\n  op: \"clear-echo\";\n}\n\nexport interface TstSetOperation {\n  op: \"set\";\n  id: string;\n  index?: number;\n  value: number;\n}\n\nexport interface TstEvalOperation {\n  op: \"eval\" | \"tick\" | \"tock\";\n}\n\nexport interface TstOutputOperation {\n  op: \"output\";\n}\n\nexport interface TstOutputSpec {\n  id: string;\n  builtin: boolean;\n  address: number;\n  style: \"D\" | \"X\" | \"B\" | \"S\";\n  width: number;\n  lpad: number;\n  rpad: number;\n}\n\nexport interface TstOutputListOperation {\n  op: \"output-list\";\n  spec: TstOutputSpec[];\n}\n\nexport interface TstLoadROMOperation {\n  op: \"loadRom\";\n  file: string;\n}\n\nexport interface TstFileOperation {\n  op: \"load\" | \"output-file\" | \"compare-to\";\n  file: string;\n}\n\nexport type TstOperation =\n  | TstFileOperation\n  | TstEvalOperation\n  | TstEchoOperation\n  | TstClearEchoOperation\n  | TstOutputOperation\n  | TstSetOperation\n  | TstOutputListOperation\n  | TstLoadROMOperation;\n\nexport interface TstLineStatement {\n  ops: TstOperation[];\n  break?: true;\n  span: Span;\n}\n\nexport interface TstRepeat {\n  statements: TstLineStatement[];\n  count: number;\n  span: Span;\n}\n\nexport interface TstWhileCondition {\n  op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\";\n  left: string | number;\n  right: string | number;\n}\n\nexport interface TstWhileStatement {\n  statements: TstLineStatement[];\n  condition: TstWhileCondition;\n  span: Span;\n}\n\nexport type TstStatement = TstLineStatement | TstRepeat | TstWhileStatement;\n\nexport interface Tst {\n  lines: TstStatement[];\n}\n\nimport tstGrammar from \"./grammars/tst.ohm.js\";\nexport const grammar = ohm.grammar(tstGrammar, grammars);\nexport const tstSemantics = grammar.extendSemantics(baseSemantics);\n\ntstSemantics.extendAttribute<number>(\"value\", {\n  Index(_a, idx, _b) {\n    return idx?.child(0)?.value ?? -1;\n  },\n});\n\ntstSemantics.extendAttribute<string>(\"name\", {\n  FileName({ name }) {\n    return name;\n  },\n});\n\ntstSemantics.addAttribute<number>(\"index\", {\n  Index(_open, dec, _close) {\n    return dec.child(0)?.value ?? 0;\n  },\n});\n\ntstSemantics.addAttribute<TstOutputSpec>(\"format\", {\n  OutputFormat(\n    { name: id },\n    index,\n    _a,\n    { sourceString: style },\n    { value: lpad },\n    _b,\n    { value: width },\n    _c,\n    { value: rpad }\n  ) {\n    return {\n      id,\n      builtin: index?.child(0) !== undefined,\n      address: index?.child(0)?.value ?? -1,\n      style: style as TstOutputSpec[\"style\"],\n      width,\n      lpad,\n      rpad,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstOperation>(\"operation\", {\n  TstEvalOperation(op) {\n    return { op: op.sourceString as TstEvalOperation[\"op\"] };\n  },\n  TstOutputOperation(_) {\n    return { op: \"output\" };\n  },\n  TstOutputListOperation(_, formats) {\n    return {\n      op: \"output-list\",\n      spec: formats.children.map((n) => n.format),\n    };\n  },\n  TstSetOperation(op, { name }, index, { value }) {\n    const setOp: TstSetOperation = {\n      op: \"set\",\n      id: name,\n      value,\n    };\n    const child = index.child(0)?.child(1)?.child(0);\n    if (child) {\n      setOp.index = child.value;\n    }\n    return setOp;\n  },\n  TstEchoOperation(op, str) {\n    return {\n      op: \"echo\",\n      message: str.String as string,\n    };\n  },\n  TstClearEchoOperation(op) {\n    return {\n      op: \"clear-echo\",\n    };\n  },\n  TstLoadROMOperation(_r, _l, { name }) {\n    return {\n      op: \"loadRom\",\n      file: name,\n    };\n  },\n  TstFileOperation(op, file) {\n    return {\n      op: op.sourceString as TstFileOperation[\"op\"],\n      file: file.sourceString,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstWhileCondition>(\"condition\", {\n  Condition({ value: left }, { sourceString: op }, { value: right }) {\n    return {\n      left,\n      right,\n      op: op as \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\",\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstStatement>(\"statement\", {\n  TstWhile(op, cond, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      condition: cond.condition,\n      span: {\n        start: op.source.startIdx,\n        end: cond.source.endIdx,\n      },\n    };\n  },\n  TstRepeat(op, count, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      count: count.child(0)?.value ?? -1,\n      span: {\n        start: op.source.startIdx,\n        end: count.source.endIdx,\n      },\n    };\n  },\n  TstStatement(list, end) {\n    const stmt: TstStatement = {\n      ops: list\n        .asIteration()\n        .children.map(\n          ({ operation }: { operation: TstOperation }) => operation\n        ),\n      span: {\n        start: this.source.startIdx,\n        end: this.source.endIdx,\n      },\n    };\n    if (end.sourceString === \"!\") {\n      stmt.break = true;\n    }\n    return stmt;\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"tst\", {\n  Tst(lines) {\n    return {\n      lines: lines.children.map((n) => n.statement),\n    };\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"root\", {\n  Root({ tst }) {\n    return tst;\n  },\n});\n\nexport const TST = {\n  grammar: tstGrammar,\n  semantics: tstSemantics,\n  parser: grammar,\n  parse: makeParser<Tst>(grammar, tstSemantics),\n};\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { bin, dec, hex } from \"./util/twos.js\";\nimport { Test } from \"./tst.js\";\n\nexport class Output {\n  private readonly fmt: \"B\" | \"X\" | \"D\" | \"S\";\n  private readonly lPad: number;\n  private readonly rPad: number;\n  private readonly len: number;\n  private readonly index: number;\n  private readonly builtin: boolean;\n\n  // new Output(inst.id, inst.style, inst.width, inst.lpad, inst.rpad)\n  constructor(\n    private variable: string,\n    format = \"%B1.1.1\",\n    len?: number,\n    lPad?: number,\n    rPad?: number,\n    builtin?: boolean,\n    index?: number\n  ) {\n    if (\n      format.startsWith(\"%\") &&\n      len === undefined &&\n      lPad === undefined &&\n      rPad === undefined\n    ) {\n      const { fmt, lPad, rPad, len } = format.match(\n        /^%(?<fmt>[BDXS])(?<lPad>\\d+)\\.(?<len>\\d+)\\.(?<rPad>\\d+)$/\n      )?.groups as {\n        fmt: \"B\" | \"X\" | \"D\" | \"S\";\n        lPad: string;\n        rPad: string;\n        len: string;\n      };\n      this.fmt = fmt;\n      this.lPad = parseInt(lPad);\n      this.rPad = parseInt(rPad);\n      this.len = parseInt(len);\n      this.builtin = false;\n      this.index = -1;\n    } else {\n      assert([\"B\", \"X\", \"D\", \"S\"].includes(format[0]));\n      this.fmt = format[0] as \"B\" | \"X\" | \"D\" | \"S\";\n      this.len = len ?? 3;\n      this.lPad = lPad ?? 1;\n      this.rPad = rPad ?? 1;\n      this.builtin = builtin ?? false;\n      this.index = index ?? -1;\n    }\n  }\n\n  header(test: Test) {\n    let variable = `${this.variable}`;\n    if (this.builtin) {\n      const index = this.index >= 0 ? this.index : \"\";\n      variable = `${variable}[${index}]`;\n    }\n    if (variable.length > this.len + this.lPad + this.rPad) {\n      return variable.substring(0, this.len + this.lPad + this.rPad);\n    }\n    return this.padCenter(variable);\n  }\n\n  print(test: Test) {\n    const val = test.getVar(this.variable, this.index);\n    if (this.fmt === \"S\") {\n      return this.padLeft(val as string);\n    }\n\n    const fmt = { B: bin, D: dec, X: hex }[this.fmt];\n    const value = fmt(val as number);\n    if (this.fmt === \"D\") {\n      return this.padRight(value);\n    } else {\n      return this.padCenter(value.slice(value.length - this.len));\n    }\n  }\n\n  private padCenter(value: string) {\n    const space = this.lPad + this.len + this.rPad;\n    const leftSpace = Math.floor((space - value.length) / 2);\n    const rightSpace = space - leftSpace - value.length;\n    const padLeft = leftSpace + value.length;\n    const padRight = padLeft + rightSpace;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n\n  private padLeft(value: string) {\n    value = value.substring(0, this.len);\n    const padRight = this.rPad + this.len;\n    const padLeft = this.lPad + padRight;\n    value = value.padEnd(padRight);\n    value = value.padStart(padLeft);\n    return value;\n  }\n\n  private padRight(value: string) {\n    value = value.substring(0, this.len);\n    const padLeft = this.lPad + this.len;\n    const padRight = this.rPad + padLeft;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n}\n","import { checkExhaustive } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Span } from \"./languages/base.js\";\nimport {\n  Tst,\n  TstLineStatement,\n  TstOperation,\n  TstOutputSpec,\n  TstStatement,\n  TstWhileStatement,\n} from \"./languages/tst.js\";\nimport { Bus, Chip, HIGH, Low, LOW } from \"./chip/chip.js\";\nimport { Clock } from \"./chip/clock.js\";\nimport { Output } from \"./output.js\";\n\nexport abstract class Test<IS extends TestInstruction = TestInstruction> {\n  protected readonly instructions: (IS | TestInstruction)[] = [];\n  protected _outputList: Output[] = [];\n  protected _log = \"\";\n  fs: FileSystem = new FileSystem();\n\n  setFileSystem(fs: FileSystem): this {\n    this.fs = fs;\n    return this;\n  }\n\n  echo(_content: string) {\n    return undefined;\n  }\n  clearEcho() {\n    return undefined;\n  }\n\n  async load(_filename: string): Promise<void> {\n    return undefined;\n  }\n  async compareTo(_filename: string): Promise<void> {\n    return undefined;\n  }\n  outputFile(_filename: string): void {\n    return undefined;\n  }\n  outputList(outputs: Output[]): void {\n    this._outputList = outputs;\n  }\n\n  addInstruction(instruction: IS | TestInstruction): void {\n    this.instructions.push(instruction);\n  }\n\n  reset(): void {\n    // No generator arrow functions\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const test = this;\n    this._steps = (function* () {\n      for (const instruction of test.instructions) {\n        yield* instruction.steps(test);\n      }\n    })();\n    this._log = \"\";\n  }\n\n  _steps: IterableIterator<IS | TestInstruction> | undefined;\n  _step: IteratorResult<IS | TestInstruction, IS | TestInstruction> | undefined;\n\n  get steps(): Iterator<IS | TestInstruction> {\n    if (this._steps === undefined) {\n      this.reset();\n    }\n    if (this._steps === undefined) {\n      throw new Error(\"Reset did not initialize steps\");\n    }\n    return this._steps;\n  }\n\n  get currentStep(): IS | TestInstruction | undefined {\n    return this._step?.value;\n  }\n\n  async step() {\n    this._step = this.steps.next();\n    if (!this._step.done) {\n      await this._step.value.do(this);\n      return false;\n    }\n    return true;\n  }\n\n  async run() {\n    while (!(await this.step()));\n  }\n\n  protected readonly breakpoints: Map<string, number> = new Map();\n  addBreakpoint(variable: string, value: number) {\n    this.breakpoints.set(variable, value);\n  }\n  clearBreakpoints() {\n    this.breakpoints.clear();\n  }\n\n  output() {\n    const values = this._outputList.map((output) => output.print(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  header() {\n    const values = this._outputList.map((output) => output.header(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  log() {\n    return this._log;\n  }\n\n  abstract hasVar(variable: string | number): boolean;\n  abstract getVar(variable: string | number, offset?: number): number | string;\n  abstract setVar(variable: string, value: number, offset?: number): void;\n}\n\nfunction isTstLineStatment(line: TstStatement): line is TstLineStatement {\n  return (line as TstLineStatement).ops !== undefined;\n}\n\nfunction isTstWhileStatement(line: TstStatement): line is TstWhileStatement {\n  return (line as TstWhileStatement).condition !== undefined;\n}\n\nexport class ChipTest extends Test<ChipTestInstruction> {\n  private chip: Chip = new Low();\n  private clock = Clock.get();\n\n  static from(tst: Tst): ChipTest {\n    const test = new ChipTest();\n\n    for (const line of tst.lines) {\n      if (isTstLineStatment(line)) {\n        test.addInstruction(ChipTest.makeLineStatement(line));\n      } else {\n        const repeat = isTstWhileStatement(line)\n          ? new TestWhileInstruction(\n              new Condition(\n                line.condition.left,\n                line.condition.right,\n                line.condition.op\n              )\n            )\n          : new TestRepeatInstruction(line.count);\n        repeat.span = line.span;\n        test.addInstruction(repeat);\n        for (const statement of line.statements) {\n          repeat.addInstruction(ChipTest.makeLineStatement(statement));\n        }\n      }\n    }\n\n    return test;\n  }\n\n  private static makeLineStatement(line: TstLineStatement) {\n    const statement = new TestCompoundInstruction();\n    statement.span = line.span;\n    for (const op of line.ops) {\n      const inst = ChipTest.makeInstruction(op);\n      if (inst !== undefined) statement.addInstruction(inst);\n    }\n    return statement;\n  }\n\n  private static makeInstruction(inst: TstOperation) {\n    const { op } = inst;\n    switch (op) {\n      case \"tick\":\n        return new TestTickInstruction();\n      case \"tock\":\n        return new TestTockInstruction();\n      case \"eval\":\n        return new TestEvalInstruction();\n      case \"output\":\n        return new TestOutputInstruction();\n      case \"set\":\n        return new TestSetInstruction(inst.id, inst.value, inst.index);\n      case \"output-list\":\n        return new TestOutputListInstruction(inst.spec);\n      case \"echo\":\n        return new TestEchoInstruction(inst.message);\n      case \"clear-echo\":\n        return new TestClearEchoInstruction();\n      case \"loadRom\":\n        return new TestLoadROMInstruction(inst.file);\n      case \"load\":\n      case \"output-file\":\n      case \"compare-to\":\n        return undefined;\n      default:\n        checkExhaustive(op, `Unknown tst operation ${op}`);\n    }\n  }\n\n  with(chip: Chip): this {\n    this.chip = chip;\n    return this;\n  }\n\n  hasVar(variable: string | number): boolean {\n    if (variable === \"time\") {\n      return true;\n    }\n    variable = `${variable}`;\n    // Look up built-in chip state variables\n    return this.chip.hasIn(variable) || this.chip.hasOut(variable);\n  }\n\n  getVar(variable: string | number, offset?: number): number | string {\n    variable = `${variable}`;\n    if (variable === \"time\") {\n      return this.clock.toString();\n    }\n    const pin = this.chip.get(variable, offset);\n    if (!pin) return 0;\n    return pin instanceof Bus ? pin.busVoltage : pin.voltage();\n  }\n\n  setVar(variable: string, value: number, offset?: number): void {\n    // Look up built-in chip state variables\n    const pinOrBus = this.chip.get(variable, offset);\n    if (pinOrBus instanceof Bus) {\n      pinOrBus.busVoltage = value;\n    } else {\n      pinOrBus?.pull(value === 0 ? LOW : HIGH);\n    }\n  }\n\n  eval(): void {\n    this.chip.eval();\n  }\n\n  tick(): void {\n    this.chip.eval();\n    this.clock.tick();\n  }\n\n  tock(): void {\n    this.chip.eval();\n    this.clock.tock();\n  }\n\n  override async load(filename: string) {\n    await this.chip.load(this.fs, filename);\n  }\n\n  override async run() {\n    this.clock.reset();\n    await super.run();\n  }\n}\n\nexport class CPUTest extends Test<CPUTestInstruction> {\n  hasVar(_variable: string | number): boolean {\n    return false;\n  }\n  getVar(_variable: string | number): number {\n    return 0;\n  }\n  setVar(_variable: string, _value: number): void {\n    return undefined;\n  }\n  ticktock(): void {\n    return undefined;\n  }\n}\n\nexport class VMTest extends Test<VMTestInstruction> {\n  hasVar(_variable: string | number): boolean {\n    return false;\n  }\n  getVar(_variable: string | number): number {\n    return 0;\n  }\n  setVar(_variable: string, _value: number): void {\n    return undefined;\n  }\n  vmstep(): void {\n    return undefined;\n  }\n}\n\nexport interface TestInstruction {\n  span?: Span;\n  do(test: Test): void;\n  steps(test: Test): IterableIterator<TestInstruction>;\n}\n\nexport class TestSetInstruction implements TestInstruction {\n  constructor(\n    private variable: string,\n    private value: number,\n    private index?: number | undefined\n  ) {}\n\n  do(test: Test) {\n    test.setVar(this.variable, this.value, this.index);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputInstruction implements TestInstruction {\n  do(test: Test) {\n    test.output();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputListInstruction implements TestInstruction {\n  private outputs: Output[] = [];\n\n  constructor(specs: TstOutputSpec[] = []) {\n    for (const spec of specs) {\n      this.addOutput(spec);\n    }\n  }\n\n  addOutput(inst: TstOutputSpec) {\n    this.outputs.push(\n      new Output(\n        inst.id,\n        inst.style,\n        inst.width,\n        inst.lpad,\n        inst.rpad,\n        inst.builtin,\n        inst.address\n      )\n    );\n  }\n\n  do(test: Test) {\n    test.outputList(this.outputs);\n    test.header();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestCompoundInstruction implements TestInstruction {\n  protected readonly instructions: TestInstruction[] = [];\n  span?: Span;\n\n  addInstruction(instruction: TestInstruction) {\n    this.instructions.push(instruction);\n  }\n\n  do(test: Test<TestInstruction>): void {\n    for (const instruction of this.instructions) {\n      instruction.do(test);\n    }\n  }\n\n  *steps(_test: Test): Generator<TestInstruction> {\n    yield this;\n  }\n}\n\nexport class TestRepeatInstruction extends TestCompoundInstruction {\n  constructor(public readonly repeat: number) {\n    super();\n  }\n\n  override do() {\n    return undefined;\n  }\n\n  private *innerSteps(test: Test) {\n    for (const instruction of this.instructions) {\n      yield* instruction.steps(test);\n    }\n  }\n\n  override *steps(test: Test) {\n    if (this.repeat === -1) {\n      yield this;\n      while (true) {\n        yield* this.innerSteps(test);\n      }\n    } else {\n      for (let i = 0; i < this.repeat; i++) {\n        yield this;\n        yield* this.innerSteps(test);\n      }\n    }\n  }\n}\n\nexport class Condition {\n  constructor(\n    public readonly x: string | number,\n    public readonly y: string | number,\n    public readonly op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\"\n  ) {}\n\n  check(test: Test): boolean {\n    const x = test.hasVar(this.x) ? test.getVar(this.x) : this.x;\n    const y = test.hasVar(this.y) ? test.getVar(this.y) : this.y;\n\n    if (typeof x === \"string\" || typeof y === \"string\") {\n      switch (this.op) {\n        case \"=\":\n          return `${x}` === `${y}`;\n        case \"<>\":\n          return `${x}` !== `${y}`;\n      }\n    } else {\n      switch (this.op) {\n        case \"<\":\n          return x < y;\n        case \"<=\":\n          return x <= y;\n        case \">\":\n          return x > y;\n        case \">=\":\n          return x >= y;\n        case \"=\":\n          return x === y;\n        case \"<>\":\n          return x !== y;\n      }\n    }\n    return false;\n  }\n}\n\nexport class TestWhileInstruction extends TestCompoundInstruction {\n  constructor(public readonly condition: Condition) {\n    super();\n  }\n\n  override *steps(test: Test) {\n    while (this.condition.check(test)) {\n      yield this;\n      for (const instruction of this.instructions) {\n        yield* instruction.steps(test);\n      }\n    }\n  }\n}\n\nexport class TestEchoInstruction implements TestInstruction {\n  constructor(public readonly content: string) {}\n  do(test: Test) {\n    test.echo(this.content);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearEchoInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearEcho();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestLoadROMInstruction implements TestInstruction {\n  constructor(readonly file: string) {}\n  async do(test: Test) {\n    test.fs.pushd(\"/samples\");\n    await test.load(this.file);\n    test.fs.popd();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestBreakpointInstruction implements TestInstruction {\n  constructor(readonly variable: string, readonly value: number) {}\n\n  do(test: Test) {\n    test.addBreakpoint(this.variable, this.value);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearBreakpointsInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearBreakpoints();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface ChipTestInstruction extends TestInstruction {\n  _chipTestInstruction_: true;\n  do(test: ChipTest): void | Promise<void>;\n}\n\nexport class TestEvalInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.eval();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTickInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tick();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTockInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface CPUTestInstruction extends TestInstruction {\n  _cpuTestInstruction_: true;\n  do(test: CPUTest): void | Promise<void>;\n}\n\nexport class TestTickTockInstruction implements CPUTestInstruction {\n  readonly _cpuTestInstruction_ = true;\n  do(test: CPUTest) {\n    test.ticktock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface VMTestInstruction extends TestInstruction {\n  _vmTestInstruction_: true;\n  do(test: VMTest): void | Promise<void>;\n}\n\nexport class TestVMStepInstruction implements VMTestInstruction {\n  readonly _vmTestInstruction_ = true;\n  do(test: VMTest) {\n    test.vmstep();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n","import {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\n\nexport type CommandOps = keyof typeof COMMANDS.op;\nexport type JumpOps = keyof typeof JUMP.op;\nexport type StoreOps = keyof typeof ASSIGN.op;\n\nexport function asm(op: number): string {\n  if (op & 0x8000) {\n    return cInstruction(op);\n  }\n  return aInstruction(op);\n}\n\nfunction cInstruction(op: number): string {\n  op = op & 0xffff; // Clear high order bits\n  const mop = (op & 0x1000) >> 12;\n  const cop: CommandOps = ((op & 0b0000111111000000) >> 6) as CommandOps;\n  const sop: StoreOps = ((op & 0b0000000000111000) >> 3) as StoreOps;\n  const jop: JumpOps = (op & 0b0000000000000111) as JumpOps;\n\n  if (COMMANDS.op[cop] === undefined) {\n    // Invalid commend\n    return \"#ERR\";\n  }\n\n  let command = COMMANDS.op[cop];\n  if (mop) {\n    command = command.replace(/A/g, \"M\") as COMMANDS_ASM;\n  }\n\n  const store = ASSIGN.op[sop];\n  const jump = JUMP.op[jop];\n\n  let instruction: string = command;\n  if (store) {\n    instruction = `${store}=${instruction}`;\n  }\n  if (jump) {\n    instruction = `${instruction};${jump}`;\n  }\n\n  return instruction;\n}\n\nfunction aInstruction(op: number): string {\n  return \"@\" + (op & 0x7fff).toString(10);\n}\n\nexport function op(asm: string): number {\n  if (asm[0] === \"@\") {\n    return aop(asm);\n  } else {\n    return cop(asm);\n  }\n}\n\nfunction aop(asm: string): number {\n  return parseInt(asm.substring(1), 10);\n}\n\nfunction cop(asm: string): number {\n  const parts = asm.match(\n    /(?:(?<assign>[AMD]{1,3})=)?(?<operation>[-!01ADM&|]{1,3})(?:;(?<jump>JGT|JLT|JGE|JLE|JEQ|JMP))?/\n  );\n  const { assign, operation, jump } = parts?.groups ?? {};\n  const mode = operation.includes(\"M\") || assign.includes(\"M\");\n  const aop = ASSIGN.asm[(assign as ASSIGN_ASM) ?? \"\"];\n  const jop = JUMP.asm[(jump as JUMP_ASM) ?? \"\"];\n  const cop = COMMANDS.asm[(operation as COMMANDS_ASM) ?? \"\"];\n\n  return makeC(mode, cop, aop, jop);\n}\n\nexport function makeC(\n  isM: boolean,\n  op: COMMANDS_OP,\n  assign: ASSIGN_OP = 0,\n  jmp: JUMP_OP = 0\n): number {\n  const C = 0xe000;\n  const A = isM ? 0x1000 : 0;\n  const O = op << 6;\n  const D = (assign ?? 0) << 3;\n  const J = jmp ?? 0;\n  return C + A + O + D + J;\n}\n","const Hex = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n];\n\nexport function chars(i: number): string {\n  return Hex[i] ?? \"X\";\n}\n\nexport function bits(i: number): string {\n  switch (i) {\n    case 0x0:\n      return \"0000\";\n    case 0x1:\n      return \"0001\";\n    case 0x2:\n      return \"0010\";\n    case 0x3:\n      return \"0011\";\n    case 0x4:\n      return \"0100\";\n    case 0x5:\n      return \"0101\";\n    case 0x6:\n      return \"0110\";\n    case 0x7:\n      return \"0111\";\n    case 0x8:\n      return \"1000\";\n    case 0x9:\n      return \"1001\";\n    case 0xa:\n      return \"1010\";\n    case 0xb:\n      return \"1011\";\n    case 0xc:\n      return \"1100\";\n    case 0xd:\n      return \"1101\";\n    case 0xe:\n      return \"1110\";\n    case 0xf:\n      return \"1111\";\n    default:\n      return \"erro\";\n  }\n}\n\nexport function int(n: string, radix: number): number {\n  const i = parseInt(n.replace(/[^\\d+-.xa-fA-F]/g, \"\"), radix);\n  return i & 0xffff;\n}\n\nexport function int16(i: string): number {\n  return int(i, 16);\n}\n\nexport function int10(i: string): number {\n  return int(i, 10);\n}\n\nexport function int2(i: string): number {\n  return int(i, 2);\n}\n\nexport function hex(i: number): string {\n  const hu = chars((i & 0xf000) >> 12);\n  const hl = chars((i & 0x0f00) >> 8);\n  const lu = chars((i & 0x00f0) >> 4);\n  const ll = chars(i & 0x000f);\n\n  return `0x${hu}${hl}${lu}${ll}`;\n}\n\nexport function bin(i: number, precision = 16): string {\n  const hu = bits((i & 0xf000) >> 12);\n  const hl = bits((i & 0x0f00) >> 8);\n  const lu = bits((i & 0x00f0) >> 4);\n  const ll = bits(i & 0x000f);\n\n  // return `${hu} ${hl} ${lu} ${ll}`;\n  return `${hu}${hl}${lu}${ll}`.substring(16 - precision); // Match the book's formatting\n}\n\nexport function dec(i: number): string {\n  i = i & 0xffff;\n  if (i === 0x8000) {\n    return \"-32768\";\n  }\n  if (i & 0x8000) {\n    i = (~i + 1) & 0x7fff;\n    return `-${i}`;\n  }\n  return `${i}`;\n}\n\nexport function uns(i: number): string {\n  i = i & 0xffff;\n  return `${i}`;\n}\n\nexport function nand16(a: number, b: number): number {\n  a = a & 0xffff;\n  b = b & 0xffff;\n  let c = ~(a & b);\n  c = c & 0xffff;\n  return c;\n}\n"],"names":["DiffTable","className","out","cmp","zeroState","output","CMP","compare","isErr","_jsxs","children","_jsx","display","Err","cmpData","Ok","outData","failures","table","range","Math","min","length","map","i","cmpI","outI","max","_","j","cell","pass","trim","match","style","fontFamily","marginBottom","row","DiffCell","pinWidth","start","end","undefined","Error","build","parts","getBuiltinChip","name","toString","buildChip","Chip","ins","pin","width","outs","clocked","part","builtin","partChip","wires","lhs","rhs","to","from","wire","e","ROM32K","fs","path","load","v","at","busVoltage","RAM","Screen","SCREEN","Keyboard","key","this","KEYBOARD","Memory","RAM16K","add","keyboard","screen","ram","in","voltage","address","inn","OFFSET","eval","startsWith","idx","int10","groups","offset","ClockedChip","CPU","emptyState","_state","cpuTick","cpuInput","state","writeM","pull","HIGH","LOW","ALU","cpuTock","addressM","outM","PC","inM","instruction","reset","ConstantBus","A","D","Computer","get","And","a","b","and","n","And16","and16","DMux","sel","dmux","DMux4Way","dmux4way","c","d","DMux8Way","dmux8way","f","g","h","mux16","mux16_4","s2","Mux","mux","set","Mux16","Mux4Way16","Mux8Way16","mux16_8","Nand","nand","Nand16","nand16","Not","Not16","or","Or","Or16","or16","Or8way","Xor","xor","Xor16","xor16","add16","Add16","ALUNoStat","x","y","op","alu","flags","ng","Flags","zr","halfAdder","HalfAdder","sum","carry","FullAdder","s","ca","fullAdder","Inc16","DFF","t","REGISTRY","Map","Bit","Register","RAM8","RAM64","RAM512","RAM4K","VRegister","ChipCtor","chip","bit","bits","_memory","MemoryChip","pow","_address","_nextData","assert","size","RamBus","index","num","Bus","newWidth","next","push","forEach","reduce","nextVoltage","InSubBus","bus","connect","mask","high","low","mid","OutSubBus","value","TRUE_BUS","FALSE_BUS","parsePinDecl","toPin","w","Number","Symbol","iterator","Pins","has","minWidth","insert","values","id","internals","Set","internal","pins","clockedPins","Clock","$","subscribe","hasIn","hasOut","getBuiltin","BUILTIN_NAMES","includes","connections","isOutPin","wireOutPin","wireInPin","toLowerCase","emplace","partPin","assertExists","chipPin","findPin","isInternal","ensureWidth","remove","Low","level","tock","tick","unsubscribe","clock","BehaviorSubject","ticks","Subject","subject","frameSubject","COMMANDS","asm","M","ASSIGN","MD","AM","AD","AMD","JUMP","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","Positive","Zero","Negative","o","flag","BITS","decode","x1","x2","am","d1","d2","d3","j1","j2","j3","alu2","ROM","input","tickState","cpu","FORMATS","memory","Int16Array","format","current","int2","int16","isFinite","updates","slice","fn","grammar","ohm","asmGrammar","grammars","asmSemantics","extendSemantics","baseSemantics","isALabelInstruction","inst","label","addAttribute","Root","instructions","child","AInstruction","_at","val","type","CInstruction","assignN","opN","jmpN","assign","sourceString","replace","jmp","isM","jump","store","Label","_o","_c","ASM","semantics","parser","parse","makeParser","passes","fillLabel","nextLabel","symbols","unfilled","line","emit","makeC","filter","endsWith","loadHack","loadAsm","readFile","source","unwrap","split","UNKNOWN_PARSE_ERROR","Base","createSemantics","property","root","succeeded","parsed","message","shortMessage","extendOperation","List","list","asIteration","decNumber","digits","wholeDec","binNumber","hexNumber","Name","ident","identifier","__","String","_a","str","_b","cmpGrammar","cmpSemantics","cells","lines","hdlGrammar","hdlSemantics","SubBus","startNode","endNode","WireSide","Wire","left","right","isTerminal","Wires","Part","Parts","BuiltinPart","PartList","ClockedList","PinDecl","PinList","body","Clocked","HDL","tstGrammar","tstSemantics","extendAttribute","Index","FileName","_open","dec","_close","OutputFormat","lpad","rpad","TstEvalOperation","TstOutputOperation","TstOutputListOperation","formats","spec","TstSetOperation","setOp","TstEchoOperation","TstClearEchoOperation","TstLoadROMOperation","_r","_l","file","TstFileOperation","Condition","TstWhile","cond","statements","statement","condition","span","startIdx","endIdx","TstRepeat","count","TstStatement","stmt","ops","operation","break","Tst","tst","TST","Output","variable","len","lPad","rPad","fmt","parseInt","test","substring","padCenter","getVar","padLeft","B","bin","X","hex","padRight","space","leftSpace","floor","rightSpace","padStart","padEnd","Test","FileSystem","_content","_filename","outputs","_outputList","_steps","steps","_log","_step","done","do","step","breakpoints","clear","print","join","header","isTstLineStatment","isTstWhileStatement","ChipTest","pinOrBus","filename","addInstruction","makeLineStatement","repeat","TestWhileInstruction","TestRepeatInstruction","TestCompoundInstruction","makeInstruction","TestTickInstruction","TestTockInstruction","TestEvalInstruction","TestOutputInstruction","TestSetInstruction","TestOutputListInstruction","TestEchoInstruction","TestClearEchoInstruction","TestLoadROMInstruction","checkExhaustive","setVar","specs","addOutput","outputList","_test","innerSteps","hasVar","check","content","echo","clearEcho","pushd","popd","mop","cop","sop","jop","command","cInstruction","aInstruction","aop","mode","C","O","J","Hex","chars","int","radix","hu","hl","lu","ll","precision","uns"],"sourceRoot":""}