export { FIBONACCI } from "./samples/vm/fibonnaci.js";

/**
 * Duplicated for web from node:path.
 * A parsed path object generated by path.parse() or consumed by path.format().
 */

export interface ParsedPath {
  /** The root of the path such as '/' or 'c:\' */
  root: string;
  /** The full directory path such as '/home/user/dir' or 'c:\path\dir' */
  dir: string;
  /** The file name including extension (if any) such as 'index.html' */
  base: string;
  /** The file extension (if any) such as '.html' */
  ext: string;
  /** The file name without extension (if any) such as 'index' */
  name: string;
}

export type Assignment = ParsedPath;

// To rebuild this list of stubs using node.js:
//
// full = await import("./full.js")
// Object.entries(full.Assignments).map(([key, entry]) => ({key, entries: Object.keys(entry).reduce((a, b) => (a[b] = '', a), {})})).reduce(((a, b) => (a[b.key] = b.entries, a)), {})
export const AssignmentStubs = {
  Nand: { "Nand.tst": "", "Nand.cmp": "" },
  Not: { "Not.hdl": "", "Not.tst": "", "Not.cmp": "" },
  And: { "And.hdl": "", "And.tst": "", "And.cmp": "" },
  Or: { "Or.hdl": "", "Or.tst": "", "Or.cmp": "" },
  Xor: { "Xor.hdl": "", "Xor.tst": "", "Xor.cmp": "" },
  Mux: { "Mux.hdl": "", "Mux.tst": "", "Mux.cmp": "" },
  DMux: { "DMux.hdl": "", "DMux.tst": "", "DMux.cmp": "" },
  Not16: { "Not16.hdl": "", "Not16.tst": "", "Not16.cmp": "" },
  And16: { "And16.hdl": "", "And16.tst": "", "And16.cmp": "" },
  Or16: { "Or16.hdl": "", "Or16.tst": "", "Or16.cmp": "" },
  Mux16: { "Mux16.hdl": "", "Mux16.tst": "", "Mux16.cmp": "" },
  Mux4Way16: { "Mux4Way16.hdl": "", "Mux4Way16.tst": "", "Mux4Way16.cmp": "" },
  Mux8Way16: { "Mux8Way16.hdl": "", "Mux8Way16.tst": "", "Mux8Way16.cmp": "" },
  DMux4Way: { "DMux4Way.hdl": "", "DMux4Way.tst": "", "DMux4Way.cmp": "" },
  DMux8Way: { "DMux8Way.hdl": "", "DMux8Way.tst": "", "DMux8Way.cmp": "" },
  Or8Way: { "Or8Way.hdl": "", "Or8Way.tst": "", "Or8Way.cmp": "" },
  HalfAdder: { "HalfAdder.hdl": "", "HalfAdder.tst": "", "HalfAdder.cmp": "" },
  FullAdder: { "FullAdder.hdl": "", "FullAdder.tst": "", "FullAdder.cmp": "" },
  Add16: { "Add16.hdl": "", "Add16.tst": "", "Add16.cmp": "" },
  Inc16: { "Inc16.hdl": "", "Inc16.tst": "", "Inc16.cmp": "" },
  ALU: {
    "ALU.hdl": "",
    "ALU.tst": "",
    "ALU.cmp": "",
    "ALU-basic.tst": "",
    "ALU-basic.cmp": "",
  },
  Bit: { "Bit.hdl": "", "Bit.tst": "", "Bit.cmp": "" },
  Register: { "Register.hdl": "", "Register.tst": "", "Register.cmp": "" },
  PC: { "PC.hdl": "", "PC.tst": "", "PC.cmp": "" },
  RAM8: { "RAM8.hdl": "", "RAM8.tst": "", "RAM8.cmp": "" },
  RAM64: { "RAM64.hdl": "", "RAM64.tst": "", "RAM64.cmp": "" },
  RAM512: { "RAM512.hdl": "", "RAM512.tst": "", "RAM512.cmp": "" },
  RAM4K: { "RAM4K.hdl": "", "RAM4K.tst": "", "RAM4K.cmp": "" },
  RAM16K: { "RAM16K.hdl": "", "RAM16K.tst": "", "RAM16K.cmp": "" },
  Memory: { "Memory.hdl": "", "Memory.tst": "", "Memory.cmp": "" },
  CPU: {
    "CPU.hdl": "",
    "CPU.tst": "",
    "CPU.cmp": "",
    "CPU-external.tst": "",
    "CPU-external.cmp": "",
  },
  Computer: {
    "Computer.hdl": "",
    "ComputerAdd.tst": "",
    "ComputerAdd.cmp": "",
    "ComputerMax.tst": "",
    "ComputerMax.cmp": "",
    "ComputerRect.tst": "",
    "ComputerRect.cmp": "",
  },
  SimpleAdd: {
    "SimpleAdd.vm": "",
    "SimpleAddVME.tst": "",
    "SimpleAdd.cmp": "",
    "SimpleAdd.tst": "",
  },
  StackTest: {
    "StackTest.vm": "",
    "StackTestVME.tst": "",
    "StackTest.cmp": "",
    "StackTest.tst": "",
  },
  BasicTest: {
    "BasicTest.vm": "",
    "BasicTestVME.tst": "",
    "BasicTest.cmp": "",
    "BasicTest.tst": "",
  },
  PointerTest: {
    "PointerTest.vm": "",
    "PointerTestVME.tst": "",
    "PointerTest.cmp": "",
    "PointerTest.tst": "",
  },
  StaticTest: {
    "StaticTest.vm": "",
    "StaticTestVME.tst": "",
    "StaticTest.cmp": "",
    "StaticTest.tst": "",
  },
  BasicLoop: {
    "BasicLoop.vm": "",
    "BasicLoopVME.tst": "",
    "BasicLoop.cmp": "",
    "BasicLoop.tst": "",
  },
  FibonacciSeries: {
    "FibonacciSeries.vm": "",
    "FibonacciSeriesVME.tst": "",
    "FibonacciSeries.cmp": "",
    "FibonacciSeries.tst": "",
  },
  SimpleFunction: {
    "SimpleFunction.vm": "",
    "SimpleFunctionVME.tst": "",
    "SimpleFunction.cmp": "",
    "SimpleFunction.tst": "",
  },
  NestedCall: {
    "Sys.vm": "",
    "NestedCallVME.tst": "",
    "NestedCall.cmp": "",
    "NestedCall.tst": "",
  },
  FibonacciElement: {
    "Sys.vm": "",
    "Main.vm": "",
    "FibonacciElementVME.tst": "",
    "FibonacciElement.cmp": "",
    "FibonacciElement.tst": "",
  },
  StaticsTest: {
    "Class1.vm": "",
    "Class2.vm": "",
    "Sys.vm": "",
    "StaticsTestVME.tst": "",
    "StaticsTest.cmp": "",
    "StaticsTest.tst": "",
  },
};

export const BUILTIN_CHIP_PROJECTS: Record<
  "01" | "02" | "03" | "05",
  string[]
> = {
  "01": ["Nand"],
  "02": [],
  "03": ["DFF"],
  "05": ["Screen", "Keyboard", "DRegister", "ARegister", "ROM32K", "RAM16K"],
};

export const CHIP_PROJECTS: Record<"01" | "02" | "03" | "05", string[]> = {
  "01": [
    "Not",
    "And",
    "Or",
    "Xor",
    "Mux",
    "DMux",
    "Not16",
    "And16",
    "Or16",
    "Mux16",
    "Or8Way",
    "Mux4Way16",
    "Mux8Way16",
    "DMux4Way",
    "DMux8Way",
  ],
  "02": [
    "HalfAdder",
    "FullAdder",
    "Add16",
    "Inc16",
    "ALU",
    // "ALUAll", // Special secret undocumented ALU tests
  ],
  "03": ["Bit", "Register", "RAM8", "RAM64", "RAM512", "RAM4K", "RAM16K", "PC"],
  "05": ["Memory", "CPU", "Computer"],
};

export const CHIP_ORDER: Partial<Record<"01" | "02" | "03" | "05", string[]>> =
  {
    "05": [
      "Memory",
      "CPU",
      "Computer",
      "Screen",
      "Keyboard",
      "DRegister",
      "ARegister",
      "ROM32K",
      "RAM16K",
    ],
  };

export const ASM_PROJECTS: Record<"06", string[]> = {
  "06": ["Add", "Max", "Rectangle", "Pong"],
};

export const VM_PROJECTS: Record<"07" | "08", string[]> = {
  "07": ["SimpleAdd", "StackTest", "BasicTest", "PointerTest", "StaticTest"],
  "08": [
    "BasicLoop",
    "FibonacciSeries",
    "SimpleFunction",
    "NestedCall",
    "FibonacciElement",
    "StaticsTest",
  ],
};

function partitionChips(project: "01" | "02" | "03" | "05", chips: string[]) {
  const base = CHIP_PROJECTS[project];
  // Get all the default project chips, in order, and remove those that aren't in `chips`.
  const core = base.filter((name) => chips.includes(name));
  // Get all the chips that aren't in base.
  const rest = chips.filter((name) => !base.includes(name));
  rest.sort();
  return [...core, ...rest];
}

export function sortChips(project: string, chips: string[]): string[] {
  switch (project) {
    case "1":
    case "01": {
      return partitionChips("01", chips);
    }
    case "2":
    case "02": {
      return partitionChips("02", chips);
    }
    case "3":
    case "03": {
      return partitionChips("03", chips);
    }
    case "5":
    case "05": {
      return partitionChips("05", chips);
    }
    default:
      chips.sort();
      return chips;
  }
}
